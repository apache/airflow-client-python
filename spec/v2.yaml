components:
  schemas:
    AppBuilderMenuItemResponse:
      additionalProperties: true
      description: Serializer for AppBuilder Menu Item responses.
      properties:
        category:
          nullable: true
          type: string
        href:
          nullable: true
          type: string
        name:
          title: Name
          type: string
      required:
      - name
      title: AppBuilderMenuItemResponse
      type: object
    AppBuilderViewResponse:
      additionalProperties: true
      description: Serializer for AppBuilder View responses.
      properties:
        category:
          nullable: true
          type: string
        label:
          nullable: true
          type: string
        name:
          nullable: true
          type: string
        view:
          nullable: true
          type: string
      title: AppBuilderViewResponse
      type: object
    AssetAliasCollectionResponse:
      description: Asset alias collection response.
      properties:
        asset_aliases:
          items:
            $ref: '#/components/schemas/AssetAliasResponse'
          title: Asset Aliases
          type: array
        total_entries:
          title: Total Entries
          type: integer
      required:
      - asset_aliases
      - total_entries
      title: AssetAliasCollectionResponse
      type: object
    AssetAliasResponse:
      description: Asset alias serializer for responses.
      properties:
        group:
          title: Group
          type: string
        id:
          title: Id
          type: integer
        name:
          title: Name
          type: string
      required:
      - id
      - name
      - group
      title: AssetAliasResponse
      type: object
    AssetCollectionResponse:
      description: Asset collection response.
      properties:
        assets:
          items:
            $ref: '#/components/schemas/AssetResponse'
          title: Assets
          type: array
        total_entries:
          title: Total Entries
          type: integer
      required:
      - assets
      - total_entries
      title: AssetCollectionResponse
      type: object
    AssetEventCollectionResponse:
      description: Asset event collection response.
      properties:
        asset_events:
          items:
            $ref: '#/components/schemas/AssetEventResponse'
          title: Asset Events
          type: array
        total_entries:
          title: Total Entries
          type: integer
      required:
      - asset_events
      - total_entries
      title: AssetEventCollectionResponse
      type: object
    AssetEventResponse:
      description: Asset event serializer for responses.
      properties:
        asset_id:
          title: Asset Id
          type: integer
        created_dagruns:
          items:
            $ref: '#/components/schemas/DagRunAssetReference'
          title: Created Dagruns
          type: array
        extra:
          additionalProperties: true
          nullable: true
          type: object
        group:
          nullable: true
          type: string
        id:
          title: Id
          type: integer
        name:
          nullable: true
          type: string
        source_dag_id:
          nullable: true
          type: string
        source_map_index:
          title: Source Map Index
          type: integer
        source_run_id:
          nullable: true
          type: string
        source_task_id:
          nullable: true
          type: string
        timestamp:
          format: date-time
          title: Timestamp
          type: string
        uri:
          nullable: true
          type: string
      required:
      - id
      - asset_id
      - source_map_index
      - created_dagruns
      - timestamp
      title: AssetEventResponse
      type: object
    AssetResponse:
      description: Asset serializer for responses.
      properties:
        aliases:
          items:
            $ref: '#/components/schemas/AssetAliasResponse'
          title: Aliases
          type: array
        consuming_dags:
          items:
            $ref: '#/components/schemas/DagScheduleAssetReference'
          title: Consuming Dags
          type: array
        created_at:
          format: date-time
          title: Created At
          type: string
        extra:
          additionalProperties: true
          nullable: true
          type: object
        group:
          title: Group
          type: string
        id:
          title: Id
          type: integer
        name:
          title: Name
          type: string
        producing_tasks:
          items:
            $ref: '#/components/schemas/TaskOutletAssetReference'
          title: Producing Tasks
          type: array
        updated_at:
          format: date-time
          title: Updated At
          type: string
        uri:
          title: Uri
          type: string
      required:
      - id
      - name
      - uri
      - group
      - created_at
      - updated_at
      - consuming_dags
      - producing_tasks
      - aliases
      title: AssetResponse
      type: object
    BackfillCollectionResponse:
      description: Backfill Collection serializer for responses.
      properties:
        backfills:
          items:
            $ref: '#/components/schemas/BackfillResponse'
          title: Backfills
          type: array
        total_entries:
          title: Total Entries
          type: integer
      required:
      - backfills
      - total_entries
      title: BackfillCollectionResponse
      type: object
    BackfillPostBody:
      additionalProperties: false
      description: Object used for create backfill request.
      properties:
        dag_id:
          title: Dag Id
          type: string
        dag_run_conf:
          additionalProperties: true
          default: {}
          title: Dag Run Conf
          type: object
        from_date:
          format: date-time
          title: From Date
          type: string
        max_active_runs:
          default: 10
          title: Max Active Runs
          type: integer
        reprocess_behavior:
          $ref: '#/components/schemas/ReprocessBehavior'
          default: none
        run_backwards:
          default: false
          title: Run Backwards
          type: boolean
        to_date:
          format: date-time
          title: To Date
          type: string
      required:
      - dag_id
      - from_date
      - to_date
      title: BackfillPostBody
      type: object
    BackfillResponse:
      description: Base serializer for Backfill.
      properties:
        completed_at:
          format: date-time
          nullable: true
          type: string
        created_at:
          format: date-time
          title: Created At
          type: string
        dag_id:
          title: Dag Id
          type: string
        dag_run_conf:
          additionalProperties: true
          title: Dag Run Conf
          type: object
        from_date:
          format: date-time
          title: From Date
          type: string
        id:
          minimum: 0.0
          title: Id
          type: integer
        is_paused:
          title: Is Paused
          type: boolean
        max_active_runs:
          title: Max Active Runs
          type: integer
        reprocess_behavior:
          $ref: '#/components/schemas/ReprocessBehavior'
        to_date:
          format: date-time
          title: To Date
          type: string
        updated_at:
          format: date-time
          title: Updated At
          type: string
      required:
      - id
      - dag_id
      - from_date
      - to_date
      - dag_run_conf
      - is_paused
      - reprocess_behavior
      - max_active_runs
      - created_at
      - updated_at
      title: BackfillResponse
      type: object
    BaseInfoResponse:
      description: Base info serializer for responses.
      properties:
        status:
          nullable: true
          type: string
      required: []
      title: BaseInfoResponse
      type: object
    BulkActionNotOnExistence:
      description: Bulk Action to be taken if the entity does not exist.
      enum:
      - fail
      - skip
      title: BulkActionNotOnExistence
      type: string
    BulkActionOnExistence:
      description: Bulk Action to be taken if the entity already exists or not.
      enum:
      - fail
      - skip
      - overwrite
      title: BulkActionOnExistence
      type: string
    BulkActionResponse:
      description: 'Serializer for individual bulk action responses.


        Represents the outcome of a single bulk operation (create, update, or delete).

        The response includes a list of successful keys and any errors encountered
        during the operation.

        This structure helps users understand which key actions succeeded and which
        failed.'
      properties:
        errors:
          default: []
          description: A list of errors encountered during the operation, each containing
            details about the issue.
          items:
            additionalProperties: true
            type: object
          title: Errors
          type: array
        success:
          default: []
          description: A list of unique id/key representing successful operations.
          items:
            type: string
          title: Success
          type: array
      title: BulkActionResponse
      type: object
    BulkBody_ConnectionBody_:
      additionalProperties: false
      properties:
        actions:
          items:
            oneOf:
            - $ref: '#/components/schemas/BulkCreateAction_ConnectionBody_'
            - $ref: '#/components/schemas/BulkUpdateAction_ConnectionBody_'
            - $ref: '#/components/schemas/BulkDeleteAction_ConnectionBody_'
          title: Actions
          type: array
      required:
      - actions
      title: BulkBody[ConnectionBody]
      type: object
    BulkBody_PoolBody_:
      additionalProperties: false
      properties:
        actions:
          items:
            oneOf:
            - $ref: '#/components/schemas/BulkCreateAction_PoolBody_'
            - $ref: '#/components/schemas/BulkUpdateAction_PoolBody_'
            - $ref: '#/components/schemas/BulkDeleteAction_PoolBody_'
          title: Actions
          type: array
      required:
      - actions
      title: BulkBody[PoolBody]
      type: object
    BulkBody_VariableBody_:
      additionalProperties: false
      properties:
        actions:
          items:
            oneOf:
            - $ref: '#/components/schemas/BulkCreateAction_VariableBody_'
            - $ref: '#/components/schemas/BulkUpdateAction_VariableBody_'
            - $ref: '#/components/schemas/BulkDeleteAction_VariableBody_'
          title: Actions
          type: array
      required:
      - actions
      title: BulkBody[VariableBody]
      type: object
    BulkCreateAction_ConnectionBody_:
      additionalProperties: false
      properties:
        action:
          const: create
          description: The action to be performed on the entities.
          title: Action
          type: string
        action_on_existence:
          $ref: '#/components/schemas/BulkActionOnExistence'
          default: fail
        entities:
          description: A list of entities to be created.
          items:
            $ref: '#/components/schemas/ConnectionBody'
          title: Entities
          type: array
      required:
      - action
      - entities
      title: BulkCreateAction[ConnectionBody]
      type: object
    BulkCreateAction_PoolBody_:
      additionalProperties: false
      properties:
        action:
          const: create
          description: The action to be performed on the entities.
          title: Action
          type: string
        action_on_existence:
          $ref: '#/components/schemas/BulkActionOnExistence'
          default: fail
        entities:
          description: A list of entities to be created.
          items:
            $ref: '#/components/schemas/PoolBody'
          title: Entities
          type: array
      required:
      - action
      - entities
      title: BulkCreateAction[PoolBody]
      type: object
    BulkCreateAction_VariableBody_:
      additionalProperties: false
      properties:
        action:
          const: create
          description: The action to be performed on the entities.
          title: Action
          type: string
        action_on_existence:
          $ref: '#/components/schemas/BulkActionOnExistence'
          default: fail
        entities:
          description: A list of entities to be created.
          items:
            $ref: '#/components/schemas/VariableBody'
          title: Entities
          type: array
      required:
      - action
      - entities
      title: BulkCreateAction[VariableBody]
      type: object
    BulkDeleteAction_ConnectionBody_:
      additionalProperties: false
      properties:
        action:
          const: delete
          description: The action to be performed on the entities.
          title: Action
          type: string
        action_on_non_existence:
          $ref: '#/components/schemas/BulkActionNotOnExistence'
          default: fail
        entities:
          description: A list of entity id/key to be deleted.
          items:
            type: string
          title: Entities
          type: array
      required:
      - action
      - entities
      title: BulkDeleteAction[ConnectionBody]
      type: object
    BulkDeleteAction_PoolBody_:
      additionalProperties: false
      properties:
        action:
          const: delete
          description: The action to be performed on the entities.
          title: Action
          type: string
        action_on_non_existence:
          $ref: '#/components/schemas/BulkActionNotOnExistence'
          default: fail
        entities:
          description: A list of entity id/key to be deleted.
          items:
            type: string
          title: Entities
          type: array
      required:
      - action
      - entities
      title: BulkDeleteAction[PoolBody]
      type: object
    BulkDeleteAction_VariableBody_:
      additionalProperties: false
      properties:
        action:
          const: delete
          description: The action to be performed on the entities.
          title: Action
          type: string
        action_on_non_existence:
          $ref: '#/components/schemas/BulkActionNotOnExistence'
          default: fail
        entities:
          description: A list of entity id/key to be deleted.
          items:
            type: string
          title: Entities
          type: array
      required:
      - action
      - entities
      title: BulkDeleteAction[VariableBody]
      type: object
    BulkResponse:
      description: 'Serializer for responses to bulk entity operations.


        This represents the results of create, update, and delete actions performed
        on entity in bulk.

        Each action (if requested) is represented as a field containing details about
        successful keys and any encountered errors.

        Fields are populated in the response only if the respective action was part
        of the request, else are set None.'
      properties:
        create:
          $ref: '#/components/schemas/BulkActionResponse'
          nullable: true
        delete:
          $ref: '#/components/schemas/BulkActionResponse'
          nullable: true
        update:
          $ref: '#/components/schemas/BulkActionResponse'
          nullable: true
      title: BulkResponse
      type: object
    BulkUpdateAction_ConnectionBody_:
      additionalProperties: false
      properties:
        action:
          const: update
          description: The action to be performed on the entities.
          title: Action
          type: string
        action_on_non_existence:
          $ref: '#/components/schemas/BulkActionNotOnExistence'
          default: fail
        entities:
          description: A list of entities to be updated.
          items:
            $ref: '#/components/schemas/ConnectionBody'
          title: Entities
          type: array
      required:
      - action
      - entities
      title: BulkUpdateAction[ConnectionBody]
      type: object
    BulkUpdateAction_PoolBody_:
      additionalProperties: false
      properties:
        action:
          const: update
          description: The action to be performed on the entities.
          title: Action
          type: string
        action_on_non_existence:
          $ref: '#/components/schemas/BulkActionNotOnExistence'
          default: fail
        entities:
          description: A list of entities to be updated.
          items:
            $ref: '#/components/schemas/PoolBody'
          title: Entities
          type: array
      required:
      - action
      - entities
      title: BulkUpdateAction[PoolBody]
      type: object
    BulkUpdateAction_VariableBody_:
      additionalProperties: false
      properties:
        action:
          const: update
          description: The action to be performed on the entities.
          title: Action
          type: string
        action_on_non_existence:
          $ref: '#/components/schemas/BulkActionNotOnExistence'
          default: fail
        entities:
          description: A list of entities to be updated.
          items:
            $ref: '#/components/schemas/VariableBody'
          title: Entities
          type: array
      required:
      - action
      - entities
      title: BulkUpdateAction[VariableBody]
      type: object
    ClearTaskInstancesBody:
      additionalProperties: false
      description: Request body for Clear Task Instances endpoint.
      properties:
        dag_run_id:
          nullable: true
          type: string
        dry_run:
          default: true
          title: Dry Run
          type: boolean
        end_date:
          format: date-time
          nullable: true
          type: string
        include_downstream:
          default: false
          title: Include Downstream
          type: boolean
        include_future:
          default: false
          title: Include Future
          type: boolean
        include_past:
          default: false
          title: Include Past
          type: boolean
        include_upstream:
          default: false
          title: Include Upstream
          type: boolean
        only_failed:
          default: true
          title: Only Failed
          type: boolean
        only_running:
          default: false
          title: Only Running
          type: boolean
        reset_dag_runs:
          default: true
          title: Reset Dag Runs
          type: boolean
        start_date:
          format: date-time
          nullable: true
          type: string
        task_ids:
          items:
            anyOf:
            - type: string
            - maxItems: 2
              minItems: 2
              prefixItems:
              - type: string
              - type: integer
              type: array
          nullable: true
          type: array
      title: ClearTaskInstancesBody
      type: object
    Config:
      additionalProperties: false
      description: List of config sections with their options.
      properties:
        sections:
          items:
            $ref: '#/components/schemas/ConfigSection'
          title: Sections
          type: array
      required:
      - sections
      title: Config
      type: object
    ConfigOption:
      additionalProperties: false
      description: Config option.
      properties:
        key:
          title: Key
          type: string
        value:
          anyOf:
          - type: string
          - maxItems: 2
            minItems: 2
            prefixItems:
            - type: string
            - type: string
            type: array
          title: Value
      required:
      - key
      - value
      title: ConfigOption
      type: object
    ConfigSection:
      additionalProperties: false
      description: Config Section Schema.
      properties:
        name:
          title: Name
          type: string
        options:
          items:
            $ref: '#/components/schemas/ConfigOption'
          title: Options
          type: array
      required:
      - name
      - options
      title: ConfigSection
      type: object
    ConnectionBody:
      additionalProperties: false
      description: Connection Serializer for requests body.
      properties:
        conn_type:
          title: Conn Type
          type: string
        connection_id:
          maxLength: 200
          pattern: ^[\w.-]+$
          title: Connection Id
          type: string
        description:
          nullable: true
          type: string
        extra:
          nullable: true
          type: string
        host:
          nullable: true
          type: string
        login:
          nullable: true
          type: string
        password:
          nullable: true
          type: string
        port:
          nullable: true
          type: integer
        schema:
          nullable: true
          type: string
      required:
      - connection_id
      - conn_type
      title: ConnectionBody
      type: object
    ConnectionCollectionResponse:
      description: Connection Collection serializer for responses.
      properties:
        connections:
          items:
            $ref: '#/components/schemas/ConnectionResponse'
          title: Connections
          type: array
        total_entries:
          title: Total Entries
          type: integer
      required:
      - connections
      - total_entries
      title: ConnectionCollectionResponse
      type: object
    ConnectionResponse:
      description: Connection serializer for responses.
      properties:
        conn_type:
          title: Conn Type
          type: string
        connection_id:
          title: Connection Id
          type: string
        description:
          nullable: true
          type: string
        extra:
          nullable: true
          type: string
        host:
          nullable: true
          type: string
        login:
          nullable: true
          type: string
        password:
          nullable: true
          type: string
        port:
          nullable: true
          type: integer
        schema:
          nullable: true
          type: string
      required:
      - connection_id
      - conn_type
      title: ConnectionResponse
      type: object
    ConnectionTestResponse:
      description: Connection Test serializer for responses.
      properties:
        message:
          title: Message
          type: string
        status:
          title: Status
          type: boolean
      required:
      - status
      - message
      title: ConnectionTestResponse
      type: object
    CreateAssetEventsBody:
      additionalProperties: false
      description: Create asset events request.
      properties:
        asset_id:
          title: Asset Id
          type: integer
        extra:
          additionalProperties: true
          title: Extra
          type: object
      required:
      - asset_id
      title: CreateAssetEventsBody
      type: object
    DAGCollectionResponse:
      description: DAG Collection serializer for responses.
      properties:
        dags:
          items:
            $ref: '#/components/schemas/DAGResponse'
          title: Dags
          type: array
        total_entries:
          title: Total Entries
          type: integer
      required:
      - dags
      - total_entries
      title: DAGCollectionResponse
      type: object
    DAGDetailsResponse:
      description: Specific serializer for DAG Details responses.
      properties:
        asset_expression:
          additionalProperties: true
          nullable: true
          type: object
        bundle_name:
          nullable: true
          type: string
        bundle_version:
          nullable: true
          type: string
        catchup:
          title: Catchup
          type: boolean
        concurrency:
          description: Return max_active_tasks as concurrency.
          readOnly: true
          title: Concurrency
          type: integer
        dag_display_name:
          title: Dag Display Name
          type: string
        dag_id:
          title: Dag Id
          type: string
        dag_run_timeout:
          format: duration
          nullable: true
          type: string
        description:
          nullable: true
          type: string
        doc_md:
          nullable: true
          type: string
        end_date:
          format: date-time
          nullable: true
          type: string
        file_token:
          description: Return file token.
          readOnly: true
          title: File Token
          type: string
        fileloc:
          title: Fileloc
          type: string
        has_import_errors:
          title: Has Import Errors
          type: boolean
        has_task_concurrency_limits:
          title: Has Task Concurrency Limits
          type: boolean
        is_paused:
          title: Is Paused
          type: boolean
        is_paused_upon_creation:
          nullable: true
          type: boolean
        is_stale:
          title: Is Stale
          type: boolean
        last_expired:
          format: date-time
          nullable: true
          type: string
        last_parsed:
          format: date-time
          nullable: true
          type: string
        last_parsed_time:
          format: date-time
          nullable: true
          type: string
        latest_dag_version:
          $ref: '#/components/schemas/DagVersionResponse'
          nullable: true
        max_active_runs:
          nullable: true
          type: integer
        max_active_tasks:
          title: Max Active Tasks
          type: integer
        max_consecutive_failed_dag_runs:
          title: Max Consecutive Failed Dag Runs
          type: integer
        next_dagrun_data_interval_end:
          format: date-time
          nullable: true
          type: string
        next_dagrun_data_interval_start:
          format: date-time
          nullable: true
          type: string
        next_dagrun_logical_date:
          format: date-time
          nullable: true
          type: string
        next_dagrun_run_after:
          format: date-time
          nullable: true
          type: string
        owner_links:
          additionalProperties:
            type: string
          nullable: true
          type: object
        owners:
          items:
            type: string
          title: Owners
          type: array
        params:
          additionalProperties: true
          nullable: true
          type: object
        relative_fileloc:
          nullable: true
          type: string
        render_template_as_native_obj:
          title: Render Template As Native Obj
          type: boolean
        start_date:
          format: date-time
          nullable: true
          type: string
        tags:
          items:
            $ref: '#/components/schemas/DagTagResponse'
          title: Tags
          type: array
        template_search_path:
          items:
            type: string
          nullable: true
          type: array
        timetable_description:
          nullable: true
          type: string
        timetable_summary:
          nullable: true
          type: string
        timezone:
          nullable: true
          type: string
      required:
      - dag_id
      - dag_display_name
      - is_paused
      - is_stale
      - fileloc
      - tags
      - max_active_tasks
      - max_consecutive_failed_dag_runs
      - has_task_concurrency_limits
      - has_import_errors
      - owners
      - catchup
      - render_template_as_native_obj
      - file_token
      - concurrency
      title: DAGDetailsResponse
      type: object
    DAGPatchBody:
      additionalProperties: false
      description: Dag Serializer for updatable bodies.
      properties:
        is_paused:
          title: Is Paused
          type: boolean
      required:
      - is_paused
      title: DAGPatchBody
      type: object
    DAGResponse:
      description: DAG serializer for responses.
      properties:
        bundle_name:
          nullable: true
          type: string
        bundle_version:
          nullable: true
          type: string
        dag_display_name:
          title: Dag Display Name
          type: string
        dag_id:
          title: Dag Id
          type: string
        description:
          nullable: true
          type: string
        file_token:
          description: Return file token.
          readOnly: true
          title: File Token
          type: string
        fileloc:
          title: Fileloc
          type: string
        has_import_errors:
          title: Has Import Errors
          type: boolean
        has_task_concurrency_limits:
          title: Has Task Concurrency Limits
          type: boolean
        is_paused:
          title: Is Paused
          type: boolean
        is_stale:
          title: Is Stale
          type: boolean
        last_expired:
          format: date-time
          nullable: true
          type: string
        last_parsed_time:
          format: date-time
          nullable: true
          type: string
        max_active_runs:
          nullable: true
          type: integer
        max_active_tasks:
          title: Max Active Tasks
          type: integer
        max_consecutive_failed_dag_runs:
          title: Max Consecutive Failed Dag Runs
          type: integer
        next_dagrun_data_interval_end:
          format: date-time
          nullable: true
          type: string
        next_dagrun_data_interval_start:
          format: date-time
          nullable: true
          type: string
        next_dagrun_logical_date:
          format: date-time
          nullable: true
          type: string
        next_dagrun_run_after:
          format: date-time
          nullable: true
          type: string
        owners:
          items:
            type: string
          title: Owners
          type: array
        relative_fileloc:
          nullable: true
          type: string
        tags:
          items:
            $ref: '#/components/schemas/DagTagResponse'
          title: Tags
          type: array
        timetable_description:
          nullable: true
          type: string
        timetable_summary:
          nullable: true
          type: string
      required:
      - dag_id
      - dag_display_name
      - is_paused
      - is_stale
      - fileloc
      - tags
      - max_active_tasks
      - max_consecutive_failed_dag_runs
      - has_task_concurrency_limits
      - has_import_errors
      - owners
      - file_token
      title: DAGResponse
      type: object
    DAGRunClearBody:
      additionalProperties: false
      description: DAG Run serializer for clear endpoint body.
      properties:
        dry_run:
          default: true
          title: Dry Run
          type: boolean
        only_failed:
          default: false
          title: Only Failed
          type: boolean
      title: DAGRunClearBody
      type: object
    DAGRunCollectionResponse:
      description: DAG Run Collection serializer for responses.
      properties:
        dag_runs:
          items:
            $ref: '#/components/schemas/DAGRunResponse'
          title: Dag Runs
          type: array
        total_entries:
          title: Total Entries
          type: integer
      required:
      - dag_runs
      - total_entries
      title: DAGRunCollectionResponse
      type: object
    DAGRunPatchBody:
      additionalProperties: false
      description: DAG Run Serializer for PATCH requests.
      properties:
        note:
          maxLength: 1000
          nullable: true
          type: string
        state:
          $ref: '#/components/schemas/DAGRunPatchStates'
          nullable: true
      title: DAGRunPatchBody
      type: object
    DAGRunPatchStates:
      description: Enum for DAG Run states when updating a DAG Run.
      enum:
      - queued
      - success
      - failed
      title: DAGRunPatchStates
      type: string
    DAGRunResponse:
      description: DAG Run serializer for responses.
      properties:
        bundle_version:
          nullable: true
          type: string
        conf:
          additionalProperties: true
          nullable: true
          type: object
        dag_id:
          title: Dag Id
          type: string
        dag_run_id:
          title: Dag Run Id
          type: string
        dag_versions:
          items:
            $ref: '#/components/schemas/DagVersionResponse'
          title: Dag Versions
          type: array
        data_interval_end:
          format: date-time
          nullable: true
          type: string
        data_interval_start:
          format: date-time
          nullable: true
          type: string
        end_date:
          format: date-time
          nullable: true
          type: string
        last_scheduling_decision:
          format: date-time
          nullable: true
          type: string
        logical_date:
          format: date-time
          nullable: true
          type: string
        note:
          nullable: true
          type: string
        queued_at:
          format: date-time
          nullable: true
          type: string
        run_after:
          format: date-time
          title: Run After
          type: string
        run_type:
          $ref: '#/components/schemas/DagRunType'
        start_date:
          format: date-time
          nullable: true
          type: string
        state:
          $ref: '#/components/schemas/DagRunState'
        triggered_by:
          $ref: '#/components/schemas/DagRunTriggeredByType'
          nullable: true
      required:
      - dag_run_id
      - dag_id
      - run_after
      - run_type
      - state
      - dag_versions
      title: DAGRunResponse
      type: object
    DAGRunsBatchBody:
      additionalProperties: false
      description: List DAG Runs body for batch endpoint.
      properties:
        dag_ids:
          items:
            type: string
          nullable: true
          type: array
        end_date_gte:
          format: date-time
          nullable: true
          type: string
        end_date_lte:
          format: date-time
          nullable: true
          type: string
        logical_date_gte:
          format: date-time
          nullable: true
          type: string
        logical_date_lte:
          format: date-time
          nullable: true
          type: string
        order_by:
          nullable: true
          type: string
        page_limit:
          default: 100
          minimum: 0.0
          title: Page Limit
          type: integer
        page_offset:
          default: 0
          minimum: 0.0
          title: Page Offset
          type: integer
        run_after_gte:
          format: date-time
          nullable: true
          type: string
        run_after_lte:
          format: date-time
          nullable: true
          type: string
        start_date_gte:
          format: date-time
          nullable: true
          type: string
        start_date_lte:
          format: date-time
          nullable: true
          type: string
        states:
          items:
            anyOf:
            - $ref: '#/components/schemas/DagRunState'
            - type: 'null'
          nullable: true
          type: array
      title: DAGRunsBatchBody
      type: object
    DAGSourceResponse:
      description: DAG Source serializer for responses.
      properties:
        content:
          nullable: true
          type: string
        dag_id:
          title: Dag Id
          type: string
        version_number:
          nullable: true
          type: integer
      required:
      - dag_id
      title: DAGSourceResponse
      type: object
    DAGTagCollectionResponse:
      description: DAG Tags Collection serializer for responses.
      properties:
        tags:
          items:
            type: string
          title: Tags
          type: array
        total_entries:
          title: Total Entries
          type: integer
      required:
      - tags
      - total_entries
      title: DAGTagCollectionResponse
      type: object
    DAGVersionCollectionResponse:
      description: DAG Version Collection serializer for responses.
      properties:
        dag_versions:
          items:
            $ref: '#/components/schemas/DagVersionResponse'
          title: Dag Versions
          type: array
        total_entries:
          title: Total Entries
          type: integer
      required:
      - dag_versions
      - total_entries
      title: DAGVersionCollectionResponse
      type: object
    DAGWarningCollectionResponse:
      description: DAG warning collection serializer for responses.
      properties:
        dag_warnings:
          items:
            $ref: '#/components/schemas/DAGWarningResponse'
          title: Dag Warnings
          type: array
        total_entries:
          title: Total Entries
          type: integer
      required:
      - dag_warnings
      - total_entries
      title: DAGWarningCollectionResponse
      type: object
    DAGWarningResponse:
      description: DAG Warning serializer for responses.
      properties:
        dag_id:
          title: Dag Id
          type: string
        message:
          title: Message
          type: string
        timestamp:
          format: date-time
          title: Timestamp
          type: string
        warning_type:
          $ref: '#/components/schemas/DagWarningType'
      required:
      - dag_id
      - warning_type
      - message
      - timestamp
      title: DAGWarningResponse
      type: object
    DagProcessorInfoResponse:
      description: DagProcessor info serializer for responses.
      properties:
        latest_dag_processor_heartbeat:
          nullable: true
          type: string
        status:
          nullable: true
          type: string
      required: []
      title: DagProcessorInfoResponse
      type: object
    DagRunAssetReference:
      additionalProperties: false
      description: DAGRun serializer for asset responses.
      properties:
        dag_id:
          title: Dag Id
          type: string
        data_interval_end:
          format: date-time
          nullable: true
          type: string
        data_interval_start:
          format: date-time
          nullable: true
          type: string
        end_date:
          format: date-time
          nullable: true
          type: string
        logical_date:
          format: date-time
          nullable: true
          type: string
        run_id:
          title: Run Id
          type: string
        start_date:
          format: date-time
          title: Start Date
          type: string
        state:
          title: State
          type: string
      required:
      - run_id
      - dag_id
      - start_date
      - state
      title: DagRunAssetReference
      type: object
    DagRunState:
      description: 'All possible states that a DagRun can be in.


        These are "shared" with TaskInstanceState in some parts of the code,

        so please ensure that their values always match the ones with the

        same name in TaskInstanceState.'
      enum:
      - queued
      - running
      - success
      - failed
      title: DagRunState
      type: string
    DagRunTriggeredByType:
      description: Class with TriggeredBy types for DagRun.
      enum:
      - cli
      - operator
      - rest_api
      - ui
      - test
      - timetable
      - asset
      - backfill
      title: DagRunTriggeredByType
      type: string
    DagRunType:
      description: Class with DagRun types.
      enum:
      - backfill
      - scheduled
      - manual
      - asset_triggered
      title: DagRunType
      type: string
    DagScheduleAssetReference:
      additionalProperties: false
      description: DAG schedule reference serializer for assets.
      properties:
        created_at:
          format: date-time
          title: Created At
          type: string
        dag_id:
          title: Dag Id
          type: string
        updated_at:
          format: date-time
          title: Updated At
          type: string
      required:
      - dag_id
      - created_at
      - updated_at
      title: DagScheduleAssetReference
      type: object
    DagStatsCollectionResponse:
      description: DAG Stats Collection serializer for responses.
      properties:
        dags:
          items:
            $ref: '#/components/schemas/DagStatsResponse'
          title: Dags
          type: array
        total_entries:
          title: Total Entries
          type: integer
      required:
      - dags
      - total_entries
      title: DagStatsCollectionResponse
      type: object
    DagStatsResponse:
      description: DAG Stats serializer for responses.
      properties:
        dag_id:
          title: Dag Id
          type: string
        stats:
          items:
            $ref: '#/components/schemas/DagStatsStateResponse'
          title: Stats
          type: array
      required:
      - dag_id
      - stats
      title: DagStatsResponse
      type: object
    DagStatsStateResponse:
      description: DagStatsState serializer for responses.
      properties:
        count:
          title: Count
          type: integer
        state:
          $ref: '#/components/schemas/DagRunState'
      required:
      - state
      - count
      title: DagStatsStateResponse
      type: object
    DagTagResponse:
      description: DAG Tag serializer for responses.
      properties:
        dag_id:
          title: Dag Id
          type: string
        name:
          title: Name
          type: string
      required:
      - name
      - dag_id
      title: DagTagResponse
      type: object
    DagVersionResponse:
      description: Dag Version serializer for responses.
      properties:
        bundle_name:
          nullable: true
          type: string
        bundle_url:
          nullable: true
          type: string
        bundle_version:
          nullable: true
          type: string
        created_at:
          format: date-time
          title: Created At
          type: string
        dag_id:
          title: Dag Id
          type: string
        id:
          format: uuid
          title: Id
          type: string
        version_number:
          title: Version Number
          type: integer
      required:
      - id
      - version_number
      - dag_id
      - created_at
      title: DagVersionResponse
      type: object
    DagWarningType:
      description: 'Enum for DAG warning types.


        This is the set of allowable values for the ``warning_type`` field

        in the DagWarning model.'
      enum:
      - asset conflict
      - non-existent pool
      title: DagWarningType
      type: string
    DryRunBackfillCollectionResponse:
      description: Backfill collection serializer for responses in dry-run mode.
      properties:
        backfills:
          items:
            $ref: '#/components/schemas/DryRunBackfillResponse'
          title: Backfills
          type: array
        total_entries:
          title: Total Entries
          type: integer
      required:
      - backfills
      - total_entries
      title: DryRunBackfillCollectionResponse
      type: object
    DryRunBackfillResponse:
      description: Backfill serializer for responses in dry-run mode.
      properties:
        logical_date:
          format: date-time
          title: Logical Date
          type: string
      required:
      - logical_date
      title: DryRunBackfillResponse
      type: object
    EventLogCollectionResponse:
      description: Event Log Collection Response.
      properties:
        event_logs:
          items:
            $ref: '#/components/schemas/EventLogResponse'
          title: Event Logs
          type: array
        total_entries:
          title: Total Entries
          type: integer
      required:
      - event_logs
      - total_entries
      title: EventLogCollectionResponse
      type: object
    EventLogResponse:
      description: Event Log Response.
      properties:
        dag_id:
          nullable: true
          type: string
        event:
          title: Event
          type: string
        event_log_id:
          title: Event Log Id
          type: integer
        extra:
          nullable: true
          type: string
        logical_date:
          format: date-time
          nullable: true
          type: string
        map_index:
          nullable: true
          type: integer
        owner:
          nullable: true
          type: string
        run_id:
          nullable: true
          type: string
        task_id:
          nullable: true
          type: string
        try_number:
          nullable: true
          type: integer
        when:
          format: date-time
          title: When
          type: string
      required:
      - event_log_id
      - when
      - event
      title: EventLogResponse
      type: object
    ExtraLinkCollectionResponse:
      description: Extra Links Response.
      properties:
        extra_links:
          additionalProperties:
            nullable: true
            type: string
          title: Extra Links
          type: object
        total_entries:
          title: Total Entries
          type: integer
      required:
      - extra_links
      - total_entries
      title: ExtraLinkCollectionResponse
      type: object
    FastAPIAppResponse:
      additionalProperties: true
      description: Serializer for Plugin FastAPI App responses.
      properties:
        app:
          title: App
          type: string
        name:
          title: Name
          type: string
        url_prefix:
          title: Url Prefix
          type: string
      required:
      - app
      - url_prefix
      - name
      title: FastAPIAppResponse
      type: object
    FastAPIRootMiddlewareResponse:
      additionalProperties: true
      description: Serializer for Plugin FastAPI root middleware responses.
      properties:
        middleware:
          title: Middleware
          type: string
        name:
          title: Name
          type: string
      required:
      - middleware
      - name
      title: FastAPIRootMiddlewareResponse
      type: object
    HTTPExceptionResponse:
      description: HTTPException Model used for error response.
      properties:
        detail:
          anyOf:
          - type: string
          - additionalProperties: true
            type: object
          title: Detail
      required:
      - detail
      title: HTTPExceptionResponse
      type: object
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
          type: array
      title: HTTPValidationError
      type: object
    HealthInfoResponse:
      description: Health serializer for responses.
      properties:
        dag_processor:
          $ref: '#/components/schemas/DagProcessorInfoResponse'
          nullable: true
        metadatabase:
          $ref: '#/components/schemas/BaseInfoResponse'
        scheduler:
          $ref: '#/components/schemas/SchedulerInfoResponse'
        triggerer:
          $ref: '#/components/schemas/TriggererInfoResponse'
      required:
      - metadatabase
      - scheduler
      - triggerer
      title: HealthInfoResponse
      type: object
    ImportErrorCollectionResponse:
      description: Import Error Collection Response.
      properties:
        import_errors:
          items:
            $ref: '#/components/schemas/ImportErrorResponse'
          title: Import Errors
          type: array
        total_entries:
          title: Total Entries
          type: integer
      required:
      - import_errors
      - total_entries
      title: ImportErrorCollectionResponse
      type: object
    ImportErrorResponse:
      description: Import Error Response.
      properties:
        bundle_name:
          nullable: true
          type: string
        filename:
          title: Filename
          type: string
        import_error_id:
          title: Import Error Id
          type: integer
        stack_trace:
          title: Stack Trace
          type: string
        timestamp:
          format: date-time
          title: Timestamp
          type: string
      required:
      - import_error_id
      - timestamp
      - filename
      - stack_trace
      title: ImportErrorResponse
      type: object
    JobCollectionResponse:
      description: Job Collection Response.
      properties:
        jobs:
          items:
            $ref: '#/components/schemas/JobResponse'
          title: Jobs
          type: array
        total_entries:
          title: Total Entries
          type: integer
      required:
      - jobs
      - total_entries
      title: JobCollectionResponse
      type: object
    JobResponse:
      description: Job serializer for responses.
      properties:
        dag_id:
          nullable: true
          type: string
        end_date:
          format: date-time
          nullable: true
          type: string
        executor_class:
          nullable: true
          type: string
        hostname:
          nullable: true
          type: string
        id:
          title: Id
          type: integer
        job_type:
          nullable: true
          type: string
        latest_heartbeat:
          format: date-time
          nullable: true
          type: string
        start_date:
          format: date-time
          nullable: true
          type: string
        state:
          nullable: true
          type: string
        unixname:
          nullable: true
          type: string
      required:
      - id
      title: JobResponse
      type: object
    JsonValue: {}
    PatchTaskInstanceBody:
      additionalProperties: false
      description: Request body for Clear Task Instances endpoint.
      properties:
        include_downstream:
          default: false
          title: Include Downstream
          type: boolean
        include_future:
          default: false
          title: Include Future
          type: boolean
        include_past:
          default: false
          title: Include Past
          type: boolean
        include_upstream:
          default: false
          title: Include Upstream
          type: boolean
        new_state:
          $ref: '#/components/schemas/TaskInstanceState'
          nullable: true
        note:
          maxLength: 1000
          nullable: true
          type: string
      title: PatchTaskInstanceBody
      type: object
    PluginCollectionResponse:
      description: Plugin Collection serializer.
      properties:
        plugins:
          items:
            $ref: '#/components/schemas/PluginResponse'
          title: Plugins
          type: array
        total_entries:
          title: Total Entries
          type: integer
      required:
      - plugins
      - total_entries
      title: PluginCollectionResponse
      type: object
    PluginResponse:
      description: Plugin serializer.
      properties:
        appbuilder_menu_items:
          items:
            $ref: '#/components/schemas/AppBuilderMenuItemResponse'
          title: Appbuilder Menu Items
          type: array
        appbuilder_views:
          items:
            $ref: '#/components/schemas/AppBuilderViewResponse'
          title: Appbuilder Views
          type: array
        fastapi_apps:
          items:
            $ref: '#/components/schemas/FastAPIAppResponse'
          title: Fastapi Apps
          type: array
        fastapi_root_middlewares:
          items:
            $ref: '#/components/schemas/FastAPIRootMiddlewareResponse'
          title: Fastapi Root Middlewares
          type: array
        flask_blueprints:
          items:
            type: string
          title: Flask Blueprints
          type: array
        global_operator_extra_links:
          items:
            type: string
          title: Global Operator Extra Links
          type: array
        listeners:
          items:
            type: string
          title: Listeners
          type: array
        macros:
          items:
            type: string
          title: Macros
          type: array
        name:
          title: Name
          type: string
        operator_extra_links:
          items:
            type: string
          title: Operator Extra Links
          type: array
        source:
          title: Source
          type: string
        timetables:
          items:
            type: string
          title: Timetables
          type: array
      required:
      - name
      - macros
      - flask_blueprints
      - fastapi_apps
      - fastapi_root_middlewares
      - appbuilder_views
      - appbuilder_menu_items
      - global_operator_extra_links
      - operator_extra_links
      - source
      - listeners
      - timetables
      title: PluginResponse
      type: object
    PoolBody:
      additionalProperties: false
      description: Pool serializer for post bodies.
      properties:
        description:
          nullable: true
          type: string
        include_deferred:
          default: false
          title: Include Deferred
          type: boolean
        name:
          maxLength: 256
          title: Name
          type: string
        slots:
          title: Slots
          type: integer
      required:
      - name
      - slots
      title: PoolBody
      type: object
    PoolCollectionResponse:
      description: Pool Collection serializer for responses.
      properties:
        pools:
          items:
            $ref: '#/components/schemas/PoolResponse'
          title: Pools
          type: array
        total_entries:
          title: Total Entries
          type: integer
      required:
      - pools
      - total_entries
      title: PoolCollectionResponse
      type: object
    PoolPatchBody:
      additionalProperties: false
      description: Pool serializer for patch bodies.
      properties:
        description:
          nullable: true
          type: string
        include_deferred:
          nullable: true
          type: boolean
        pool:
          nullable: true
          type: string
        slots:
          nullable: true
          type: integer
      title: PoolPatchBody
      type: object
    PoolResponse:
      description: Pool serializer for responses.
      properties:
        deferred_slots:
          title: Deferred Slots
          type: integer
        description:
          nullable: true
          type: string
        include_deferred:
          title: Include Deferred
          type: boolean
        name:
          title: Name
          type: string
        occupied_slots:
          title: Occupied Slots
          type: integer
        open_slots:
          title: Open Slots
          type: integer
        queued_slots:
          title: Queued Slots
          type: integer
        running_slots:
          title: Running Slots
          type: integer
        scheduled_slots:
          title: Scheduled Slots
          type: integer
        slots:
          title: Slots
          type: integer
      required:
      - name
      - slots
      - include_deferred
      - occupied_slots
      - running_slots
      - queued_slots
      - scheduled_slots
      - open_slots
      - deferred_slots
      title: PoolResponse
      type: object
    ProviderCollectionResponse:
      description: Provider Collection serializer for responses.
      properties:
        providers:
          items:
            $ref: '#/components/schemas/ProviderResponse'
          title: Providers
          type: array
        total_entries:
          title: Total Entries
          type: integer
      required:
      - providers
      - total_entries
      title: ProviderCollectionResponse
      type: object
    ProviderResponse:
      description: Provider serializer for responses.
      properties:
        description:
          title: Description
          type: string
        package_name:
          title: Package Name
          type: string
        version:
          title: Version
          type: string
      required:
      - package_name
      - description
      - version
      title: ProviderResponse
      type: object
    QueuedEventCollectionResponse:
      description: Queued Event Collection serializer for responses.
      properties:
        queued_events:
          items:
            $ref: '#/components/schemas/QueuedEventResponse'
          title: Queued Events
          type: array
        total_entries:
          title: Total Entries
          type: integer
      required:
      - queued_events
      - total_entries
      title: QueuedEventCollectionResponse
      type: object
    QueuedEventResponse:
      description: Queued Event serializer for responses..
      properties:
        asset_id:
          title: Asset Id
          type: integer
        created_at:
          format: date-time
          title: Created At
          type: string
        dag_id:
          title: Dag Id
          type: string
      required:
      - dag_id
      - asset_id
      - created_at
      title: QueuedEventResponse
      type: object
    ReprocessBehavior:
      description: 'Internal enum for setting reprocess behavior in a backfill.


        :meta private:'
      enum:
      - failed
      - completed
      - none
      title: ReprocessBehavior
      type: string
    SchedulerInfoResponse:
      description: Scheduler info serializer for responses.
      properties:
        latest_scheduler_heartbeat:
          nullable: true
          type: string
        status:
          nullable: true
          type: string
      required: []
      title: SchedulerInfoResponse
      type: object
    StructuredLogMessage:
      additionalProperties: true
      description: An individual log message.
      properties:
        event:
          title: Event
          type: string
        timestamp:
          format: date-time
          title: Timestamp
          type: string
      required:
      - event
      title: StructuredLogMessage
      type: object
    TaskCollectionResponse:
      description: Task collection serializer for responses.
      properties:
        tasks:
          items:
            $ref: '#/components/schemas/TaskResponse'
          title: Tasks
          type: array
        total_entries:
          title: Total Entries
          type: integer
      required:
      - tasks
      - total_entries
      title: TaskCollectionResponse
      type: object
    TaskDependencyCollectionResponse:
      description: Task scheduling dependencies collection serializer for responses.
      properties:
        dependencies:
          items:
            $ref: '#/components/schemas/TaskDependencyResponse'
          title: Dependencies
          type: array
      required:
      - dependencies
      title: TaskDependencyCollectionResponse
      type: object
    TaskDependencyResponse:
      description: Task Dependency serializer for responses.
      properties:
        name:
          title: Name
          type: string
        reason:
          title: Reason
          type: string
      required:
      - name
      - reason
      title: TaskDependencyResponse
      type: object
    TaskInstanceCollectionResponse:
      description: Task Instance Collection serializer for responses.
      properties:
        task_instances:
          items:
            $ref: '#/components/schemas/TaskInstanceResponse'
          title: Task Instances
          type: array
        total_entries:
          title: Total Entries
          type: integer
      required:
      - task_instances
      - total_entries
      title: TaskInstanceCollectionResponse
      type: object
    TaskInstanceHistoryCollectionResponse:
      description: TaskInstanceHistory Collection serializer for responses.
      properties:
        task_instances:
          items:
            $ref: '#/components/schemas/TaskInstanceHistoryResponse'
          title: Task Instances
          type: array
        total_entries:
          title: Total Entries
          type: integer
      required:
      - task_instances
      - total_entries
      title: TaskInstanceHistoryCollectionResponse
      type: object
    TaskInstanceHistoryResponse:
      description: TaskInstanceHistory serializer for responses.
      properties:
        dag_id:
          title: Dag Id
          type: string
        dag_run_id:
          title: Dag Run Id
          type: string
        dag_version:
          $ref: '#/components/schemas/DagVersionResponse'
          nullable: true
        duration:
          nullable: true
          type: number
        end_date:
          format: date-time
          nullable: true
          type: string
        executor:
          nullable: true
          type: string
        executor_config:
          title: Executor Config
          type: string
        hostname:
          nullable: true
          type: string
        map_index:
          title: Map Index
          type: integer
        max_tries:
          title: Max Tries
          type: integer
        operator:
          nullable: true
          type: string
        pid:
          nullable: true
          type: integer
        pool:
          title: Pool
          type: string
        pool_slots:
          title: Pool Slots
          type: integer
        priority_weight:
          nullable: true
          type: integer
        queue:
          nullable: true
          type: string
        queued_when:
          format: date-time
          nullable: true
          type: string
        scheduled_when:
          format: date-time
          nullable: true
          type: string
        start_date:
          format: date-time
          nullable: true
          type: string
        state:
          $ref: '#/components/schemas/TaskInstanceState'
          nullable: true
        task_display_name:
          title: Task Display Name
          type: string
        task_id:
          title: Task Id
          type: string
        try_number:
          title: Try Number
          type: integer
        unixname:
          nullable: true
          type: string
      required:
      - task_id
      - dag_id
      - dag_run_id
      - map_index
      - try_number
      - max_tries
      - task_display_name
      - pool
      - pool_slots
      - executor_config
      title: TaskInstanceHistoryResponse
      type: object
    TaskInstanceResponse:
      description: TaskInstance serializer for responses.
      properties:
        dag_id:
          title: Dag Id
          type: string
        dag_run_id:
          title: Dag Run Id
          type: string
        dag_version:
          $ref: '#/components/schemas/DagVersionResponse'
          nullable: true
        duration:
          nullable: true
          type: number
        end_date:
          format: date-time
          nullable: true
          type: string
        executor:
          nullable: true
          type: string
        executor_config:
          title: Executor Config
          type: string
        hostname:
          nullable: true
          type: string
        id:
          title: Id
          type: string
        logical_date:
          format: date-time
          nullable: true
          type: string
        map_index:
          title: Map Index
          type: integer
        max_tries:
          title: Max Tries
          type: integer
        note:
          nullable: true
          type: string
        operator:
          nullable: true
          type: string
        pid:
          nullable: true
          type: integer
        pool:
          title: Pool
          type: string
        pool_slots:
          title: Pool Slots
          type: integer
        priority_weight:
          nullable: true
          type: integer
        queue:
          nullable: true
          type: string
        queued_when:
          format: date-time
          nullable: true
          type: string
        rendered_fields:
          additionalProperties: true
          title: Rendered Fields
          type: object
        rendered_map_index:
          nullable: true
          type: string
        run_after:
          format: date-time
          title: Run After
          type: string
        scheduled_when:
          format: date-time
          nullable: true
          type: string
        start_date:
          format: date-time
          nullable: true
          type: string
        state:
          $ref: '#/components/schemas/TaskInstanceState'
          nullable: true
        task_display_name:
          title: Task Display Name
          type: string
        task_id:
          title: Task Id
          type: string
        trigger:
          $ref: '#/components/schemas/TriggerResponse'
          nullable: true
        triggerer_job:
          $ref: '#/components/schemas/JobResponse'
          nullable: true
        try_number:
          title: Try Number
          type: integer
        unixname:
          nullable: true
          type: string
      required:
      - id
      - task_id
      - dag_id
      - dag_run_id
      - map_index
      - run_after
      - try_number
      - max_tries
      - task_display_name
      - pool
      - pool_slots
      - executor_config
      title: TaskInstanceResponse
      type: object
    TaskInstanceState:
      description: 'All possible states that a Task Instance can be in.


        Note that None is also allowed, so always use this in a type hint with Optional.'
      enum:
      - removed
      - scheduled
      - queued
      - running
      - success
      - restarting
      - failed
      - up_for_retry
      - up_for_reschedule
      - upstream_failed
      - skipped
      - deferred
      title: TaskInstanceState
      type: string
    TaskInstancesBatchBody:
      additionalProperties: false
      description: Task Instance body for get batch.
      properties:
        dag_ids:
          items:
            type: string
          nullable: true
          type: array
        dag_run_ids:
          items:
            type: string
          nullable: true
          type: array
        duration_gte:
          nullable: true
          type: number
        duration_lte:
          nullable: true
          type: number
        end_date_gte:
          format: date-time
          nullable: true
          type: string
        end_date_lte:
          format: date-time
          nullable: true
          type: string
        executor:
          items:
            type: string
          nullable: true
          type: array
        logical_date_gte:
          format: date-time
          nullable: true
          type: string
        logical_date_lte:
          format: date-time
          nullable: true
          type: string
        order_by:
          nullable: true
          type: string
        page_limit:
          default: 100
          minimum: 0.0
          title: Page Limit
          type: integer
        page_offset:
          default: 0
          minimum: 0.0
          title: Page Offset
          type: integer
        pool:
          items:
            type: string
          nullable: true
          type: array
        queue:
          items:
            type: string
          nullable: true
          type: array
        run_after_gte:
          format: date-time
          nullable: true
          type: string
        run_after_lte:
          format: date-time
          nullable: true
          type: string
        start_date_gte:
          format: date-time
          nullable: true
          type: string
        start_date_lte:
          format: date-time
          nullable: true
          type: string
        state:
          items:
            anyOf:
            - $ref: '#/components/schemas/TaskInstanceState'
            - type: 'null'
          nullable: true
          type: array
        task_ids:
          items:
            type: string
          nullable: true
          type: array
      title: TaskInstancesBatchBody
      type: object
    TaskInstancesLogResponse:
      description: Log serializer for responses.
      properties:
        content:
          anyOf:
          - items:
              $ref: '#/components/schemas/StructuredLogMessage'
            type: array
          - items:
              type: string
            type: array
          title: Content
        continuation_token:
          nullable: true
          type: string
      required:
      - content
      title: TaskInstancesLogResponse
      type: object
    TaskOutletAssetReference:
      additionalProperties: false
      description: Task outlet reference serializer for assets.
      properties:
        created_at:
          format: date-time
          title: Created At
          type: string
        dag_id:
          title: Dag Id
          type: string
        task_id:
          title: Task Id
          type: string
        updated_at:
          format: date-time
          title: Updated At
          type: string
      required:
      - dag_id
      - task_id
      - created_at
      - updated_at
      title: TaskOutletAssetReference
      type: object
    TaskResponse:
      description: Task serializer for responses.
      properties:
        class_ref:
          additionalProperties: true
          nullable: true
          type: object
        depends_on_past:
          title: Depends On Past
          type: boolean
        doc_md:
          nullable: true
          type: string
        downstream_task_ids:
          items:
            type: string
          nullable: true
          type: array
        end_date:
          format: date-time
          nullable: true
          type: string
        execution_timeout:
          $ref: '#/components/schemas/TimeDelta'
          nullable: true
        extra_links:
          description: Extract and return extra_links.
          items:
            type: string
          readOnly: true
          title: Extra Links
          type: array
        is_mapped:
          nullable: true
          type: boolean
        operator_name:
          nullable: true
          type: string
        owner:
          nullable: true
          type: string
        params:
          additionalProperties: true
          nullable: true
          type: object
        pool:
          nullable: true
          type: string
        pool_slots:
          nullable: true
          type: number
        priority_weight:
          nullable: true
          type: number
        queue:
          nullable: true
          type: string
        retries:
          nullable: true
          type: number
        retry_delay:
          $ref: '#/components/schemas/TimeDelta'
          nullable: true
        retry_exponential_backoff:
          title: Retry Exponential Backoff
          type: boolean
        start_date:
          format: date-time
          nullable: true
          type: string
        task_display_name:
          nullable: true
          type: string
        task_id:
          nullable: true
          type: string
        template_fields:
          items:
            type: string
          nullable: true
          type: array
        trigger_rule:
          nullable: true
          type: string
        ui_color:
          nullable: true
          type: string
        ui_fgcolor:
          nullable: true
          type: string
        wait_for_downstream:
          title: Wait For Downstream
          type: boolean
        weight_rule:
          nullable: true
          type: string
      required:
      - depends_on_past
      - wait_for_downstream
      - retry_exponential_backoff
      - extra_links
      title: TaskResponse
      type: object
    TimeDelta:
      description: TimeDelta can be used to interact with datetime.timedelta objects.
      properties:
        __type:
          default: TimeDelta
          title: Type
          type: string
        days:
          title: Days
          type: integer
        microseconds:
          title: Microseconds
          type: integer
        seconds:
          title: Seconds
          type: integer
      required:
      - days
      - seconds
      - microseconds
      title: TimeDelta
      type: object
    TriggerDAGRunPostBody:
      additionalProperties: false
      description: Trigger DAG Run Serializer for POST body.
      properties:
        conf:
          additionalProperties: true
          title: Conf
          type: object
        dag_run_id:
          nullable: true
          type: string
        data_interval_end:
          format: date-time
          nullable: true
          type: string
        data_interval_start:
          format: date-time
          nullable: true
          type: string
        logical_date:
          format: date-time
          nullable: true
          type: string
        note:
          nullable: true
          type: string
        run_after:
          format: date-time
          nullable: true
          type: string
      required: []
      title: TriggerDAGRunPostBody
      type: object
    TriggerResponse:
      description: Trigger serializer for responses.
      properties:
        classpath:
          title: Classpath
          type: string
        created_date:
          format: date-time
          title: Created Date
          type: string
        id:
          title: Id
          type: integer
        kwargs:
          title: Kwargs
          type: string
        triggerer_id:
          nullable: true
          type: integer
      required:
      - id
      - classpath
      - kwargs
      - created_date
      title: TriggerResponse
      type: object
    TriggererInfoResponse:
      description: Triggerer info serializer for responses.
      properties:
        latest_triggerer_heartbeat:
          nullable: true
          type: string
        status:
          nullable: true
          type: string
      required: []
      title: TriggererInfoResponse
      type: object
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          title: Location
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
      type: object
    VariableBody:
      additionalProperties: false
      description: Variable serializer for bodies.
      properties:
        description:
          nullable: true
          type: string
        key:
          maxLength: 250
          title: Key
          type: string
        value:
          $ref: '#/components/schemas/JsonValue'
      required:
      - key
      - value
      title: VariableBody
      type: object
    VariableCollectionResponse:
      description: Variable Collection serializer for responses.
      properties:
        total_entries:
          title: Total Entries
          type: integer
        variables:
          items:
            $ref: '#/components/schemas/VariableResponse'
          title: Variables
          type: array
      required:
      - variables
      - total_entries
      title: VariableCollectionResponse
      type: object
    VariableResponse:
      description: Variable serializer for responses.
      properties:
        description:
          nullable: true
          type: string
        is_encrypted:
          title: Is Encrypted
          type: boolean
        key:
          title: Key
          type: string
        value:
          title: Value
          type: string
      required:
      - key
      - value
      - is_encrypted
      title: VariableResponse
      type: object
    VersionInfo:
      description: Version information serializer for responses.
      properties:
        git_version:
          nullable: true
          type: string
        version:
          title: Version
          type: string
      required:
      - version
      title: VersionInfo
      type: object
    XComCollectionResponse:
      description: XCom Collection serializer for responses.
      properties:
        total_entries:
          title: Total Entries
          type: integer
        xcom_entries:
          items:
            $ref: '#/components/schemas/XComResponse'
          title: Xcom Entries
          type: array
      required:
      - xcom_entries
      - total_entries
      title: XComCollectionResponse
      type: object
    XComCreateBody:
      additionalProperties: false
      description: Payload serializer for creating an XCom entry.
      properties:
        key:
          title: Key
          type: string
        map_index:
          default: -1
          title: Map Index
          type: integer
        value:
          title: Value
      required:
      - key
      - value
      title: XComCreateBody
      type: object
    XComResponse:
      description: Serializer for a xcom item.
      properties:
        dag_id:
          title: Dag Id
          type: string
        key:
          title: Key
          type: string
        logical_date:
          format: date-time
          nullable: true
          type: string
        map_index:
          title: Map Index
          type: integer
        run_id:
          title: Run Id
          type: string
        task_id:
          title: Task Id
          type: string
        timestamp:
          format: date-time
          title: Timestamp
          type: string
      required:
      - key
      - timestamp
      - map_index
      - task_id
      - dag_id
      - run_id
      title: XComResponse
      type: object
    XComResponseNative:
      description: XCom response serializer with native return type.
      properties:
        dag_id:
          title: Dag Id
          type: string
        key:
          title: Key
          type: string
        logical_date:
          format: date-time
          nullable: true
          type: string
        map_index:
          title: Map Index
          type: integer
        run_id:
          title: Run Id
          type: string
        task_id:
          title: Task Id
          type: string
        timestamp:
          format: date-time
          title: Timestamp
          type: string
        value:
          title: Value
      required:
      - key
      - timestamp
      - map_index
      - task_id
      - dag_id
      - run_id
      - value
      title: XComResponseNative
      type: object
    XComResponseString:
      description: XCom response serializer with string return type.
      properties:
        dag_id:
          title: Dag Id
          type: string
        key:
          title: Key
          type: string
        logical_date:
          format: date-time
          nullable: true
          type: string
        map_index:
          title: Map Index
          type: integer
        run_id:
          title: Run Id
          type: string
        task_id:
          title: Task Id
          type: string
        timestamp:
          format: date-time
          title: Timestamp
          type: string
        value:
          nullable: true
          type: string
      required:
      - key
      - timestamp
      - map_index
      - task_id
      - dag_id
      - run_id
      title: XComResponseString
      type: object
    XComUpdateBody:
      additionalProperties: false
      description: Payload serializer for updating an XCom entry.
      properties:
        map_index:
          default: -1
          title: Map Index
          type: integer
        value:
          title: Value
      required:
      - value
      title: XComUpdateBody
      type: object
  securitySchemes:
    OAuth2PasswordBearer:
      description: To authenticate Airflow API requests, clients must include a JWT
        (JSON Web Token) in the Authorization header of each request. This token is
        used to verify the identity of the client and ensure that they have the appropriate
        permissions to access the requested resources. You can use the endpoint ``POST
        /auth/token`` in order to generate a JWT token. Upon successful authentication,
        the server will issue a JWT token that contains the necessary information
        (such as user identity and scope) to authenticate subsequent requests. To
        learn more about Airflow public API authentication, please read https://airflow.apache.org/docs/apache-airflow/stable/security/api.html.
      flows:
        password:
          scopes: {}
          tokenUrl: /auth/token
      type: oauth2
info:
  description: Airflow API. All endpoints located under ``/api/v2`` can be used safely,
    are stable and backward compatible. Endpoints located under ``/ui`` are dedicated
    to the UI and are subject to breaking change depending on the need of the frontend.
    Users should not rely on those but use the public ones instead.
  title: Airflow API
  version: '2'
openapi: 3.1.0
paths:
  /api/v2/assets:
    get:
      description: Get assets.
      operationId: get_assets
      parameters:
      - in: query
        name: limit
        required: false
        schema:
          default: 50
          minimum: 0
          title: Limit
          type: integer
      - in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          title: Offset
          type: integer
      - in: query
        name: name_pattern
        required: false
        schema:
          nullable: true
          type: string
      - in: query
        name: uri_pattern
        required: false
        schema:
          nullable: true
          type: string
      - in: query
        name: dag_ids
        required: false
        schema:
          items:
            type: string
          title: Dag Ids
          type: array
      - in: query
        name: only_active
        required: false
        schema:
          default: true
          title: Only Active
          type: boolean
      - in: query
        name: order_by
        required: false
        schema:
          default: id
          title: Order By
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Assets
      tags:
      - Asset
  /api/v2/assets/aliases:
    get:
      description: Get asset aliases.
      operationId: get_asset_aliases
      parameters:
      - in: query
        name: limit
        required: false
        schema:
          default: 50
          minimum: 0
          title: Limit
          type: integer
      - in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          title: Offset
          type: integer
      - in: query
        name: name_pattern
        required: false
        schema:
          nullable: true
          type: string
      - in: query
        name: order_by
        required: false
        schema:
          default: id
          title: Order By
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetAliasCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Asset Aliases
      tags:
      - Asset
  /api/v2/assets/aliases/{asset_alias_id}:
    get:
      description: Get an asset alias.
      operationId: get_asset_alias
      parameters:
      - in: path
        name: asset_alias_id
        required: true
        schema:
          title: Asset Alias Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Asset Alias
      tags:
      - Asset
  /api/v2/assets/events:
    get:
      description: Get asset events.
      operationId: get_asset_events
      parameters:
      - in: query
        name: limit
        required: false
        schema:
          default: 50
          minimum: 0
          title: Limit
          type: integer
      - in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          title: Offset
          type: integer
      - in: query
        name: order_by
        required: false
        schema:
          default: timestamp
          title: Order By
          type: string
      - in: query
        name: asset_id
        required: false
        schema:
          nullable: true
          type: integer
      - in: query
        name: source_dag_id
        required: false
        schema:
          nullable: true
          type: string
      - in: query
        name: source_task_id
        required: false
        schema:
          nullable: true
          type: string
      - in: query
        name: source_run_id
        required: false
        schema:
          nullable: true
          type: string
      - in: query
        name: source_map_index
        required: false
        schema:
          nullable: true
          type: integer
      - in: query
        name: timestamp_gte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: timestamp_lte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetEventCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Asset Events
      tags:
      - Asset
    post:
      description: Create asset events.
      operationId: create_asset_event
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAssetEventsBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetEventResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Create Asset Event
      tags:
      - Asset
  /api/v2/assets/{asset_id}:
    get:
      description: Get an asset.
      operationId: get_asset
      parameters:
      - in: path
        name: asset_id
        required: true
        schema:
          title: Asset Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Asset
      tags:
      - Asset
  /api/v2/assets/{asset_id}/materialize:
    post:
      description: Materialize an asset by triggering a DAG run that produces it.
      operationId: materialize_asset
      parameters:
      - in: path
        name: asset_id
        required: true
        schema:
          title: Asset Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DAGRunResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Conflict
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Materialize Asset
      tags:
      - Asset
  /api/v2/assets/{asset_id}/queuedEvents:
    delete:
      description: Delete queued asset events for an asset.
      operationId: delete_asset_queued_events
      parameters:
      - in: path
        name: asset_id
        required: true
        schema:
          title: Asset Id
          type: integer
      - in: query
        name: before
        required: false
        schema:
          nullable: true
          type: string
      responses:
        '204':
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Delete Asset Queued Events
      tags:
      - Asset
    get:
      description: Get queued asset events for an asset.
      operationId: get_asset_queued_events
      parameters:
      - in: path
        name: asset_id
        required: true
        schema:
          title: Asset Id
          type: integer
      - in: query
        name: before
        required: false
        schema:
          nullable: true
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueuedEventCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Asset Queued Events
      tags:
      - Asset
  /api/v2/auth/login:
    get:
      description: Redirect to the login URL depending on the AuthManager configured.
      operationId: login
      parameters:
      - in: query
        name: next
        required: false
        schema:
          nullable: true
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '307':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Temporary Redirect
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Login
      tags:
      - Login
  /api/v2/auth/logout:
    get:
      description: Logout the user.
      operationId: logout
      parameters:
      - in: query
        name: next
        required: false
        schema:
          nullable: true
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '307':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Temporary Redirect
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Logout
      tags:
      - Login
  /api/v2/backfills:
    get:
      operationId: list_backfills
      parameters:
      - in: query
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: query
        name: limit
        required: false
        schema:
          default: 50
          minimum: 0
          title: Limit
          type: integer
      - in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          title: Offset
          type: integer
      - in: query
        name: order_by
        required: false
        schema:
          default: id
          title: Order By
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackfillCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: List Backfills
      tags:
      - Backfill
    post:
      operationId: create_backfill
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BackfillPostBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackfillResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Conflict
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Create Backfill
      tags:
      - Backfill
  /api/v2/backfills/dry_run:
    post:
      operationId: create_backfill_dry_run
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BackfillPostBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DryRunBackfillCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Conflict
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Create Backfill Dry Run
      tags:
      - Backfill
  /api/v2/backfills/{backfill_id}:
    get:
      operationId: get_backfill
      parameters:
      - in: path
        name: backfill_id
        required: true
        schema:
          minimum: 0
          title: Backfill Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackfillResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Backfill
      tags:
      - Backfill
  /api/v2/backfills/{backfill_id}/cancel:
    put:
      operationId: cancel_backfill
      parameters:
      - in: path
        name: backfill_id
        required: true
        schema:
          minimum: 0
          title: Backfill Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackfillResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Conflict
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Cancel Backfill
      tags:
      - Backfill
  /api/v2/backfills/{backfill_id}/pause:
    put:
      operationId: pause_backfill
      parameters:
      - in: path
        name: backfill_id
        required: true
        schema:
          minimum: 0
          title: Backfill Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackfillResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Conflict
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Pause Backfill
      tags:
      - Backfill
  /api/v2/backfills/{backfill_id}/unpause:
    put:
      operationId: unpause_backfill
      parameters:
      - in: path
        name: backfill_id
        required: true
        schema:
          minimum: 0
          title: Backfill Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackfillResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Conflict
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Unpause Backfill
      tags:
      - Backfill
  /api/v2/config:
    get:
      operationId: get_config
      parameters:
      - in: query
        name: section
        required: false
        schema:
          nullable: true
          type: string
      - in: header
        name: accept
        required: false
        schema:
          default: '*/*'
          enum:
          - application/json
          - text/plain
          - '*/*'
          title: Accept
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
            text/plain:
              schema:
                example: '[core]

                  dags_folder = /opt/airflow/dags

                  base_log_folder = /opt/airflow/logs


                  [smtp]

                  smtp_host = localhost

                  smtp_mail_from = airflow@example.com

                  '
                type: string
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '406':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Acceptable
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Config
      tags:
      - Config
  /api/v2/config/section/{section}/option/{option}:
    get:
      operationId: get_config_value
      parameters:
      - in: path
        name: section
        required: true
        schema:
          title: Section
          type: string
      - in: path
        name: option
        required: true
        schema:
          title: Option
          type: string
      - in: header
        name: accept
        required: false
        schema:
          default: '*/*'
          enum:
          - application/json
          - text/plain
          - '*/*'
          title: Accept
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
            text/plain:
              schema:
                example: '[core]

                  dags_folder = /opt/airflow/dags

                  base_log_folder = /opt/airflow/logs

                  '
                type: string
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '406':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Acceptable
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Config Value
      tags:
      - Config
  /api/v2/connections:
    get:
      description: Get all connection entries.
      operationId: get_connections
      parameters:
      - in: query
        name: limit
        required: false
        schema:
          default: 50
          minimum: 0
          title: Limit
          type: integer
      - in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          title: Offset
          type: integer
      - in: query
        name: order_by
        required: false
        schema:
          default: id
          title: Order By
          type: string
      - in: query
        name: connection_id_pattern
        required: false
        schema:
          nullable: true
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Connections
      tags:
      - Connection
    patch:
      description: Bulk create, update, and delete connections.
      operationId: bulk_connections
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkBody_ConnectionBody_'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Bulk Connections
      tags:
      - Connection
    post:
      description: Create connection entry.
      operationId: post_connection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionBody'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Conflict
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Post Connection
      tags:
      - Connection
  /api/v2/connections/defaults:
    post:
      description: Create default connections.
      operationId: create_default_connections
      responses:
        '204':
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
      security:
      - OAuth2PasswordBearer: []
      summary: Create Default Connections
      tags:
      - Connection
  /api/v2/connections/test:
    post:
      description: 'Test an API connection.


        This method first creates an in-memory transient conn_id & exports that to
        an env var,

        as some hook classes tries to find out the `conn` from their __init__ method
        & errors out if not found.

        It also deletes the conn id env connection after the test.'
      operationId: test_connection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionTestResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Test Connection
      tags:
      - Connection
  /api/v2/connections/{connection_id}:
    delete:
      description: Delete a connection entry.
      operationId: delete_connection
      parameters:
      - in: path
        name: connection_id
        required: true
        schema:
          title: Connection Id
          type: string
      responses:
        '204':
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Delete Connection
      tags:
      - Connection
    get:
      description: Get a connection entry.
      operationId: get_connection
      parameters:
      - in: path
        name: connection_id
        required: true
        schema:
          title: Connection Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Connection
      tags:
      - Connection
    patch:
      description: Update a connection entry.
      operationId: patch_connection
      parameters:
      - in: path
        name: connection_id
        required: true
        schema:
          title: Connection Id
          type: string
      - in: query
        name: update_mask
        required: false
        schema:
          items:
            type: string
          nullable: true
          type: array
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionResponse'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Patch Connection
      tags:
      - Connection
  /api/v2/dagReports:
    get:
      description: Get DAG report.
      operationId: get_dag_reports
      parameters:
      - in: query
        name: subdir
        required: true
        schema:
          title: Subdir
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Dag Reports
      tags:
      - DagReport
  /api/v2/dagSources/{dag_id}:
    get:
      description: Get source code using file token.
      operationId: get_dag_source
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: query
        name: version_number
        required: false
        schema:
          nullable: true
          type: integer
      - in: header
        name: accept
        required: false
        schema:
          default: '*/*'
          enum:
          - application/json
          - text/plain
          - '*/*'
          title: Accept
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DAGSourceResponse'
            text/plain:
              schema:
                example: dag code
                type: string
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '406':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Acceptable
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Dag Source
      tags:
      - DagSource
  /api/v2/dagStats:
    get:
      description: Get Dag statistics.
      operationId: get_dag_stats
      parameters:
      - in: query
        name: dag_ids
        required: false
        schema:
          items:
            type: string
          title: Dag Ids
          type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DagStatsCollectionResponse'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Dag Stats
      tags:
      - DagStats
  /api/v2/dagTags:
    get:
      description: Get all DAG tags.
      operationId: get_dag_tags
      parameters:
      - in: query
        name: limit
        required: false
        schema:
          default: 50
          minimum: 0
          title: Limit
          type: integer
      - in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          title: Offset
          type: integer
      - in: query
        name: order_by
        required: false
        schema:
          default: name
          title: Order By
          type: string
      - in: query
        name: tag_name_pattern
        required: false
        schema:
          nullable: true
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DAGTagCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Dag Tags
      tags:
      - DAG
  /api/v2/dagWarnings:
    get:
      description: Get a list of DAG warnings.
      operationId: list_dag_warnings
      parameters:
      - in: query
        name: dag_id
        required: false
        schema:
          nullable: true
          type: string
      - in: query
        name: warning_type
        required: false
        schema:
          $ref: '#/components/schemas/DagWarningType'
          nullable: true
      - in: query
        name: limit
        required: false
        schema:
          default: 50
          minimum: 0
          title: Limit
          type: integer
      - in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          title: Offset
          type: integer
      - in: query
        name: order_by
        required: false
        schema:
          default: dag_id
          title: Order By
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DAGWarningCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: List Dag Warnings
      tags:
      - DagWarning
  /api/v2/dags:
    get:
      description: Get all DAGs.
      operationId: get_dags
      parameters:
      - in: query
        name: limit
        required: false
        schema:
          default: 50
          minimum: 0
          title: Limit
          type: integer
      - in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          title: Offset
          type: integer
      - in: query
        name: tags
        required: false
        schema:
          items:
            type: string
          title: Tags
          type: array
      - in: query
        name: tags_match_mode
        required: false
        schema:
          enum:
          - any
          - all
          nullable: true
          type: string
      - in: query
        name: owners
        required: false
        schema:
          items:
            type: string
          title: Owners
          type: array
      - in: query
        name: dag_id_pattern
        required: false
        schema:
          nullable: true
          type: string
      - in: query
        name: dag_display_name_pattern
        required: false
        schema:
          nullable: true
          type: string
      - in: query
        name: exclude_stale
        required: false
        schema:
          default: true
          title: Exclude Stale
          type: boolean
      - in: query
        name: paused
        required: false
        schema:
          nullable: true
          type: boolean
      - in: query
        name: last_dag_run_state
        required: false
        schema:
          $ref: '#/components/schemas/DagRunState'
          nullable: true
      - in: query
        name: dag_run_start_date_gte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: dag_run_start_date_lte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: dag_run_end_date_gte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: dag_run_end_date_lte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: dag_run_state
        required: false
        schema:
          items:
            type: string
          title: Dag Run State
          type: array
      - in: query
        name: order_by
        required: false
        schema:
          default: dag_id
          title: Order By
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DAGCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Dags
      tags:
      - DAG
    patch:
      description: Patch multiple DAGs.
      operationId: patch_dags
      parameters:
      - in: query
        name: update_mask
        required: false
        schema:
          items:
            type: string
          nullable: true
          type: array
      - in: query
        name: limit
        required: false
        schema:
          default: 50
          minimum: 0
          title: Limit
          type: integer
      - in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          title: Offset
          type: integer
      - in: query
        name: tags
        required: false
        schema:
          items:
            type: string
          title: Tags
          type: array
      - in: query
        name: tags_match_mode
        required: false
        schema:
          enum:
          - any
          - all
          nullable: true
          type: string
      - in: query
        name: owners
        required: false
        schema:
          items:
            type: string
          title: Owners
          type: array
      - in: query
        name: dag_id_pattern
        required: false
        schema:
          nullable: true
          type: string
      - in: query
        name: exclude_stale
        required: false
        schema:
          default: true
          title: Exclude Stale
          type: boolean
      - in: query
        name: paused
        required: false
        schema:
          nullable: true
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DAGPatchBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DAGCollectionResponse'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Patch Dags
      tags:
      - DAG
  /api/v2/dags/{dag_id}:
    delete:
      description: Delete the specific DAG.
      operationId: delete_dag
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unprocessable Entity
      security:
      - OAuth2PasswordBearer: []
      summary: Delete Dag
      tags:
      - DAG
    get:
      description: Get basic information about a DAG.
      operationId: get_dag
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DAGResponse'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unprocessable Entity
      security:
      - OAuth2PasswordBearer: []
      summary: Get Dag
      tags:
      - DAG
    patch:
      description: Patch the specific DAG.
      operationId: patch_dag
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: query
        name: update_mask
        required: false
        schema:
          items:
            type: string
          nullable: true
          type: array
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DAGPatchBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DAGResponse'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Patch Dag
      tags:
      - DAG
  /api/v2/dags/{dag_id}/assets/queuedEvents:
    delete:
      operationId: delete_dag_asset_queued_events
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: query
        name: before
        required: false
        schema:
          nullable: true
          type: string
      responses:
        '204':
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Delete Dag Asset Queued Events
      tags:
      - Asset
    get:
      description: Get queued asset events for a DAG.
      operationId: get_dag_asset_queued_events
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: query
        name: before
        required: false
        schema:
          nullable: true
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueuedEventCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Dag Asset Queued Events
      tags:
      - Asset
  /api/v2/dags/{dag_id}/assets/{asset_id}/queuedEvents:
    delete:
      description: Delete a queued asset event for a DAG.
      operationId: delete_dag_asset_queued_event
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: asset_id
        required: true
        schema:
          title: Asset Id
          type: integer
      - in: query
        name: before
        required: false
        schema:
          nullable: true
          type: string
      responses:
        '204':
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Delete Dag Asset Queued Event
      tags:
      - Asset
    get:
      description: Get a queued asset event for a DAG.
      operationId: get_dag_asset_queued_event
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: asset_id
        required: true
        schema:
          title: Asset Id
          type: integer
      - in: query
        name: before
        required: false
        schema:
          nullable: true
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueuedEventResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Dag Asset Queued Event
      tags:
      - Asset
  /api/v2/dags/{dag_id}/clearTaskInstances:
    post:
      description: Clear task instances.
      operationId: post_clear_task_instances
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClearTaskInstancesBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInstanceCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Post Clear Task Instances
      tags:
      - Task Instance
  /api/v2/dags/{dag_id}/dagRuns:
    get:
      description: 'Get all DAG Runs.


        This endpoint allows specifying `~` as the dag_id to retrieve Dag Runs for
        all DAGs.'
      operationId: get_dag_runs
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: query
        name: limit
        required: false
        schema:
          default: 50
          minimum: 0
          title: Limit
          type: integer
      - in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          title: Offset
          type: integer
      - in: query
        name: run_after_gte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: run_after_lte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: logical_date_gte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: logical_date_lte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: start_date_gte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: start_date_lte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: end_date_gte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: end_date_lte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: updated_at_gte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: updated_at_lte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: run_type
        required: false
        schema:
          items:
            type: string
          title: Run Type
          type: array
      - in: query
        name: state
        required: false
        schema:
          items:
            type: string
          title: State
          type: array
      - in: query
        name: order_by
        required: false
        schema:
          default: id
          title: Order By
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DAGRunCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Dag Runs
      tags:
      - DagRun
    post:
      description: Trigger a DAG.
      operationId: trigger_dag_run
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerDAGRunPostBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DAGRunResponse'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Conflict
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Trigger Dag Run
      tags:
      - DagRun
  /api/v2/dags/{dag_id}/dagRuns/list:
    post:
      description: Get a list of DAG Runs.
      operationId: get_list_dag_runs_batch
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          const: '~'
          title: Dag Id
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DAGRunsBatchBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DAGRunCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get List Dag Runs Batch
      tags:
      - DagRun
  /api/v2/dags/{dag_id}/dagRuns/{dag_run_id}:
    delete:
      description: Delete a DAG Run entry.
      operationId: delete_dag_run
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: dag_run_id
        required: true
        schema:
          title: Dag Run Id
          type: string
      responses:
        '204':
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Delete Dag Run
      tags:
      - DagRun
    get:
      operationId: get_dag_run
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: dag_run_id
        required: true
        schema:
          title: Dag Run Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DAGRunResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Dag Run
      tags:
      - DagRun
    patch:
      description: Modify a DAG Run.
      operationId: patch_dag_run
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: dag_run_id
        required: true
        schema:
          title: Dag Run Id
          type: string
      - in: query
        name: update_mask
        required: false
        schema:
          items:
            type: string
          nullable: true
          type: array
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DAGRunPatchBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DAGRunResponse'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Patch Dag Run
      tags:
      - DagRun
  /api/v2/dags/{dag_id}/dagRuns/{dag_run_id}/clear:
    post:
      operationId: clear_dag_run
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: dag_run_id
        required: true
        schema:
          title: Dag Run Id
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DAGRunClearBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/TaskInstanceCollectionResponse'
                - $ref: '#/components/schemas/DAGRunResponse'
                title: Response Clear Dag Run
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Clear Dag Run
      tags:
      - DagRun
  /api/v2/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances:
    get:
      description: 'Get list of task instances.


        This endpoint allows specifying `~` as the dag_id, dag_run_id to retrieve
        Task Instances for all DAGs

        and DAG runs.'
      operationId: get_task_instances
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: dag_run_id
        required: true
        schema:
          title: Dag Run Id
          type: string
      - in: query
        name: task_id
        required: false
        schema:
          nullable: true
          type: string
      - in: query
        name: run_after_gte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: run_after_lte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: logical_date_gte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: logical_date_lte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: start_date_gte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: start_date_lte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: end_date_gte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: end_date_lte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: updated_at_gte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: updated_at_lte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: duration_gte
        required: false
        schema:
          nullable: true
          type: number
      - in: query
        name: duration_lte
        required: false
        schema:
          nullable: true
          type: number
      - in: query
        name: task_display_name_pattern
        required: false
        schema:
          nullable: true
          type: string
      - in: query
        name: state
        required: false
        schema:
          items:
            type: string
          title: State
          type: array
      - in: query
        name: pool
        required: false
        schema:
          items:
            type: string
          title: Pool
          type: array
      - in: query
        name: queue
        required: false
        schema:
          items:
            type: string
          title: Queue
          type: array
      - in: query
        name: executor
        required: false
        schema:
          items:
            type: string
          title: Executor
          type: array
      - in: query
        name: version_number
        required: false
        schema:
          items:
            type: integer
          title: Version Number
          type: array
      - in: query
        name: limit
        required: false
        schema:
          default: 50
          minimum: 0
          title: Limit
          type: integer
      - in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          title: Offset
          type: integer
      - in: query
        name: order_by
        required: false
        schema:
          default: map_index
          title: Order By
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInstanceCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Task Instances
      tags:
      - Task Instance
  /api/v2/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/list:
    post:
      description: Get list of task instances.
      operationId: get_task_instances_batch
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          const: '~'
          title: Dag Id
          type: string
      - in: path
        name: dag_run_id
        required: true
        schema:
          const: '~'
          title: Dag Run Id
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInstancesBatchBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInstanceCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Task Instances Batch
      tags:
      - Task Instance
  /api/v2/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}:
    get:
      description: Get task instance.
      operationId: get_task_instance
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: dag_run_id
        required: true
        schema:
          title: Dag Run Id
          type: string
      - in: path
        name: task_id
        required: true
        schema:
          title: Task Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInstanceResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Task Instance
      tags:
      - Task Instance
    patch:
      description: Update a task instance.
      operationId: patch_task_instance
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: dag_run_id
        required: true
        schema:
          title: Dag Run Id
          type: string
      - in: path
        name: task_id
        required: true
        schema:
          title: Task Id
          type: string
      - in: query
        name: map_index
        required: false
        schema:
          nullable: true
          type: integer
      - in: query
        name: update_mask
        required: false
        schema:
          items:
            type: string
          nullable: true
          type: array
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchTaskInstanceBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInstanceCollectionResponse'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Conflict
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Patch Task Instance
      tags:
      - Task Instance
  /api/v2/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/dependencies:
    get:
      description: Get dependencies blocking task from getting scheduled.
      operationId: get_task_instance_dependencies
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: dag_run_id
        required: true
        schema:
          title: Dag Run Id
          type: string
      - in: path
        name: task_id
        required: true
        schema:
          title: Task Id
          type: string
      - in: query
        name: map_index
        required: false
        schema:
          default: -1
          title: Map Index
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDependencyCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Task Instance Dependencies
      tags:
      - Task Instance
  /api/v2/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/dry_run:
    patch:
      description: Update a task instance dry_run mode.
      operationId: patch_task_instance_dry_run
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: dag_run_id
        required: true
        schema:
          title: Dag Run Id
          type: string
      - in: path
        name: task_id
        required: true
        schema:
          title: Task Id
          type: string
      - in: query
        name: map_index
        required: false
        schema:
          nullable: true
          type: integer
      - in: query
        name: update_mask
        required: false
        schema:
          items:
            type: string
          nullable: true
          type: array
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchTaskInstanceBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInstanceCollectionResponse'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Patch Task Instance Dry Run
      tags:
      - Task Instance
  /api/v2/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/links:
    get:
      description: Get extra links for task instance.
      operationId: get_extra_links
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: dag_run_id
        required: true
        schema:
          title: Dag Run Id
          type: string
      - in: path
        name: task_id
        required: true
        schema:
          title: Task Id
          type: string
      - in: query
        name: map_index
        required: false
        schema:
          default: -1
          title: Map Index
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtraLinkCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Extra Links
      tags:
      - Extra Links
      - Task Instance
  /api/v2/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/listMapped:
    get:
      description: Get list of mapped task instances.
      operationId: get_mapped_task_instances
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: dag_run_id
        required: true
        schema:
          title: Dag Run Id
          type: string
      - in: path
        name: task_id
        required: true
        schema:
          title: Task Id
          type: string
      - in: query
        name: run_after_gte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: run_after_lte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: logical_date_gte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: logical_date_lte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: start_date_gte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: start_date_lte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: end_date_gte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: end_date_lte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: updated_at_gte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: updated_at_lte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: duration_gte
        required: false
        schema:
          nullable: true
          type: number
      - in: query
        name: duration_lte
        required: false
        schema:
          nullable: true
          type: number
      - in: query
        name: state
        required: false
        schema:
          items:
            type: string
          title: State
          type: array
      - in: query
        name: pool
        required: false
        schema:
          items:
            type: string
          title: Pool
          type: array
      - in: query
        name: queue
        required: false
        schema:
          items:
            type: string
          title: Queue
          type: array
      - in: query
        name: executor
        required: false
        schema:
          items:
            type: string
          title: Executor
          type: array
      - in: query
        name: version_number
        required: false
        schema:
          items:
            type: integer
          title: Version Number
          type: array
      - in: query
        name: limit
        required: false
        schema:
          default: 50
          minimum: 0
          title: Limit
          type: integer
      - in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          title: Offset
          type: integer
      - in: query
        name: order_by
        required: false
        schema:
          default: map_index
          title: Order By
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInstanceCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Mapped Task Instances
      tags:
      - Task Instance
  /api/v2/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/logs/{try_number}:
    get:
      description: Get logs for a specific task instance.
      operationId: get_log
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: dag_run_id
        required: true
        schema:
          title: Dag Run Id
          type: string
      - in: path
        name: task_id
        required: true
        schema:
          title: Task Id
          type: string
      - in: path
        name: try_number
        required: true
        schema:
          exclusiveMinimum: 0
          title: Try Number
          type: integer
      - in: query
        name: full_content
        required: false
        schema:
          default: false
          title: Full Content
          type: boolean
      - in: query
        name: map_index
        required: false
        schema:
          default: -1
          title: Map Index
          type: integer
      - in: query
        name: token
        required: false
        schema:
          nullable: true
          type: string
      - in: header
        name: accept
        required: false
        schema:
          default: '*/*'
          enum:
          - application/json
          - application/x-ndjson
          - '*/*'
          title: Accept
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInstancesLogResponse'
            application/x-ndjson:
              schema:
                example: '{"content": "content"}

                  {"content": "content"}

                  '
                type: string
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Log
      tags:
      - Task Instance
  /api/v2/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/tries:
    get:
      description: Get list of task instances history.
      operationId: get_task_instance_tries
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: dag_run_id
        required: true
        schema:
          title: Dag Run Id
          type: string
      - in: path
        name: task_id
        required: true
        schema:
          title: Task Id
          type: string
      - in: query
        name: map_index
        required: false
        schema:
          default: -1
          title: Map Index
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInstanceHistoryCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Task Instance Tries
      tags:
      - Task Instance
  /api/v2/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/tries/{task_try_number}:
    get:
      description: Get task instance details by try number.
      operationId: get_task_instance_try_details
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: dag_run_id
        required: true
        schema:
          title: Dag Run Id
          type: string
      - in: path
        name: task_id
        required: true
        schema:
          title: Task Id
          type: string
      - in: path
        name: task_try_number
        required: true
        schema:
          title: Task Try Number
          type: integer
      - in: query
        name: map_index
        required: false
        schema:
          default: -1
          title: Map Index
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInstanceHistoryResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Task Instance Try Details
      tags:
      - Task Instance
  /api/v2/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries:
    get:
      description: 'Get all XCom entries.


        This endpoint allows specifying `~` as the dag_id, dag_run_id, task_id to
        retrieve XCom entries for all DAGs.'
      operationId: get_xcom_entries
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: dag_run_id
        required: true
        schema:
          title: Dag Run Id
          type: string
      - in: path
        name: task_id
        required: true
        schema:
          title: Task Id
          type: string
      - in: query
        name: xcom_key
        required: false
        schema:
          nullable: true
          type: string
      - in: query
        name: map_index
        required: false
        schema:
          minimum: -1
          nullable: true
          type: integer
      - in: query
        name: limit
        required: false
        schema:
          default: 50
          minimum: 0
          title: Limit
          type: integer
      - in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          title: Offset
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XComCollectionResponse'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Xcom Entries
      tags:
      - XCom
    post:
      description: Create an XCom entry.
      operationId: create_xcom_entry
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: task_id
        required: true
        schema:
          title: Task Id
          type: string
      - in: path
        name: dag_run_id
        required: true
        schema:
          title: Dag Run Id
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/XComCreateBody'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XComResponseNative'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Create Xcom Entry
      tags:
      - XCom
  /api/v2/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries/{xcom_key}:
    get:
      description: Get an XCom entry.
      operationId: get_xcom_entry
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: task_id
        required: true
        schema:
          title: Task Id
          type: string
      - in: path
        name: dag_run_id
        required: true
        schema:
          title: Dag Run Id
          type: string
      - in: path
        name: xcom_key
        required: true
        schema:
          title: Xcom Key
          type: string
      - in: query
        name: map_index
        required: false
        schema:
          default: -1
          minimum: -1
          title: Map Index
          type: integer
      - in: query
        name: deserialize
        required: false
        schema:
          default: false
          title: Deserialize
          type: boolean
      - in: query
        name: stringify
        required: false
        schema:
          default: false
          title: Stringify
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/XComResponseNative'
                - $ref: '#/components/schemas/XComResponseString'
                title: Response Get Xcom Entry
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Xcom Entry
      tags:
      - XCom
    patch:
      description: Update an existing XCom entry.
      operationId: update_xcom_entry
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: task_id
        required: true
        schema:
          title: Task Id
          type: string
      - in: path
        name: dag_run_id
        required: true
        schema:
          title: Dag Run Id
          type: string
      - in: path
        name: xcom_key
        required: true
        schema:
          title: Xcom Key
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/XComUpdateBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XComResponseNative'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Update Xcom Entry
      tags:
      - XCom
  /api/v2/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/{map_index}:
    get:
      description: Get task instance.
      operationId: get_mapped_task_instance
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: dag_run_id
        required: true
        schema:
          title: Dag Run Id
          type: string
      - in: path
        name: task_id
        required: true
        schema:
          title: Task Id
          type: string
      - in: path
        name: map_index
        required: true
        schema:
          title: Map Index
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInstanceResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Mapped Task Instance
      tags:
      - Task Instance
    patch:
      description: Update a task instance.
      operationId: patch_task_instance_by_map_index
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: dag_run_id
        required: true
        schema:
          title: Dag Run Id
          type: string
      - in: path
        name: task_id
        required: true
        schema:
          title: Task Id
          type: string
      - in: path
        name: map_index
        required: true
        schema:
          nullable: true
          type: integer
      - in: query
        name: update_mask
        required: false
        schema:
          items:
            type: string
          nullable: true
          type: array
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchTaskInstanceBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInstanceCollectionResponse'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Conflict
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Patch Task Instance
      tags:
      - Task Instance
  /api/v2/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/{map_index}/dependencies:
    get:
      description: Get dependencies blocking task from getting scheduled.
      operationId: get_task_instance_dependencies_by_map_index
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: dag_run_id
        required: true
        schema:
          title: Dag Run Id
          type: string
      - in: path
        name: task_id
        required: true
        schema:
          title: Task Id
          type: string
      - in: path
        name: map_index
        required: true
        schema:
          title: Map Index
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDependencyCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Task Instance Dependencies
      tags:
      - Task Instance
  /api/v2/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/{map_index}/dry_run:
    patch:
      description: Update a task instance dry_run mode.
      operationId: patch_task_instance_dry_run_by_map_index
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: dag_run_id
        required: true
        schema:
          title: Dag Run Id
          type: string
      - in: path
        name: task_id
        required: true
        schema:
          title: Task Id
          type: string
      - in: path
        name: map_index
        required: true
        schema:
          nullable: true
          type: integer
      - in: query
        name: update_mask
        required: false
        schema:
          items:
            type: string
          nullable: true
          type: array
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchTaskInstanceBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInstanceCollectionResponse'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Patch Task Instance Dry Run
      tags:
      - Task Instance
  /api/v2/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/{map_index}/tries:
    get:
      operationId: get_mapped_task_instance_tries
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: dag_run_id
        required: true
        schema:
          title: Dag Run Id
          type: string
      - in: path
        name: task_id
        required: true
        schema:
          title: Task Id
          type: string
      - in: path
        name: map_index
        required: true
        schema:
          title: Map Index
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInstanceHistoryCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Mapped Task Instance Tries
      tags:
      - Task Instance
  /api/v2/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/{map_index}/tries/{task_try_number}:
    get:
      operationId: get_mapped_task_instance_try_details
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: dag_run_id
        required: true
        schema:
          title: Dag Run Id
          type: string
      - in: path
        name: task_id
        required: true
        schema:
          title: Task Id
          type: string
      - in: path
        name: task_try_number
        required: true
        schema:
          title: Task Try Number
          type: integer
      - in: path
        name: map_index
        required: true
        schema:
          title: Map Index
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInstanceHistoryResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Mapped Task Instance Try Details
      tags:
      - Task Instance
  /api/v2/dags/{dag_id}/dagRuns/{dag_run_id}/upstreamAssetEvents:
    get:
      description: If dag run is asset-triggered, return the asset events that triggered
        it.
      operationId: get_upstream_asset_events
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: dag_run_id
        required: true
        schema:
          title: Dag Run Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetEventCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Upstream Asset Events
      tags:
      - DagRun
  /api/v2/dags/{dag_id}/dagVersions:
    get:
      description: 'Get all DAG Versions.


        This endpoint allows specifying `~` as the dag_id to retrieve DAG Versions
        for all DAGs.'
      operationId: get_dag_versions
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: query
        name: limit
        required: false
        schema:
          default: 50
          minimum: 0
          title: Limit
          type: integer
      - in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          title: Offset
          type: integer
      - in: query
        name: version_number
        required: false
        schema:
          title: Version Number
          type: integer
      - in: query
        name: bundle_name
        required: false
        schema:
          title: Bundle Name
          type: string
      - in: query
        name: bundle_version
        required: false
        schema:
          nullable: true
          type: string
      - in: query
        name: order_by
        required: false
        schema:
          default: id
          title: Order By
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DAGVersionCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Dag Versions
      tags:
      - DagVersion
  /api/v2/dags/{dag_id}/dagVersions/{version_number}:
    get:
      description: Get one Dag Version.
      operationId: get_dag_version
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: version_number
        required: true
        schema:
          title: Version Number
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DagVersionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Dag Version
      tags:
      - DagVersion
  /api/v2/dags/{dag_id}/details:
    get:
      description: Get details of DAG.
      operationId: get_dag_details
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DAGDetailsResponse'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Dag Details
      tags:
      - DAG
  /api/v2/dags/{dag_id}/tasks:
    get:
      description: Get tasks for DAG.
      operationId: get_tasks
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: query
        name: order_by
        required: false
        schema:
          default: task_id
          title: Order By
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskCollectionResponse'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Tasks
      tags:
      - Task
  /api/v2/dags/{dag_id}/tasks/{task_id}:
    get:
      description: Get simplified representation of a task.
      operationId: get_task
      parameters:
      - in: path
        name: dag_id
        required: true
        schema:
          title: Dag Id
          type: string
      - in: path
        name: task_id
        required: true
        schema:
          title: Task Id
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Task
      tags:
      - Task
  /api/v2/eventLogs:
    get:
      description: Get all Event Logs.
      operationId: get_event_logs
      parameters:
      - in: query
        name: limit
        required: false
        schema:
          default: 50
          minimum: 0
          title: Limit
          type: integer
      - in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          title: Offset
          type: integer
      - in: query
        name: order_by
        required: false
        schema:
          default: id
          title: Order By
          type: string
      - in: query
        name: dag_id
        required: false
        schema:
          nullable: true
          type: string
      - in: query
        name: task_id
        required: false
        schema:
          nullable: true
          type: string
      - in: query
        name: run_id
        required: false
        schema:
          nullable: true
          type: string
      - in: query
        name: map_index
        required: false
        schema:
          nullable: true
          type: integer
      - in: query
        name: try_number
        required: false
        schema:
          nullable: true
          type: integer
      - in: query
        name: owner
        required: false
        schema:
          nullable: true
          type: string
      - in: query
        name: event
        required: false
        schema:
          nullable: true
          type: string
      - in: query
        name: excluded_events
        required: false
        schema:
          items:
            type: string
          nullable: true
          type: array
      - in: query
        name: included_events
        required: false
        schema:
          items:
            type: string
          nullable: true
          type: array
      - in: query
        name: before
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: after
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventLogCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Event Logs
      tags:
      - Event Log
  /api/v2/eventLogs/{event_log_id}:
    get:
      operationId: get_event_log
      parameters:
      - in: path
        name: event_log_id
        required: true
        schema:
          title: Event Log Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventLogResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Event Log
      tags:
      - Event Log
  /api/v2/importErrors:
    get:
      description: Get all import errors.
      operationId: get_import_errors
      parameters:
      - in: query
        name: limit
        required: false
        schema:
          default: 50
          minimum: 0
          title: Limit
          type: integer
      - in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          title: Offset
          type: integer
      - in: query
        name: order_by
        required: false
        schema:
          default: id
          title: Order By
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportErrorCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Import Errors
      tags:
      - Import Error
  /api/v2/importErrors/{import_error_id}:
    get:
      description: Get an import error.
      operationId: get_import_error
      parameters:
      - in: path
        name: import_error_id
        required: true
        schema:
          title: Import Error Id
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportErrorResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Import Error
      tags:
      - Import Error
  /api/v2/jobs:
    get:
      description: Get all jobs.
      operationId: get_jobs
      parameters:
      - in: query
        name: is_alive
        required: false
        schema:
          nullable: true
          type: boolean
      - in: query
        name: start_date_gte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: start_date_lte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: end_date_gte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: end_date_lte
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
      - in: query
        name: limit
        required: false
        schema:
          default: 50
          minimum: 0
          title: Limit
          type: integer
      - in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          title: Offset
          type: integer
      - in: query
        name: order_by
        required: false
        schema:
          default: id
          title: Order By
          type: string
      - in: query
        name: job_state
        required: false
        schema:
          nullable: true
          type: string
      - in: query
        name: job_type
        required: false
        schema:
          nullable: true
          type: string
      - in: query
        name: hostname
        required: false
        schema:
          nullable: true
          type: string
      - in: query
        name: executor_class
        required: false
        schema:
          nullable: true
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobCollectionResponse'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Jobs
      tags:
      - Job
  /api/v2/monitor/health:
    get:
      operationId: get_health
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthInfoResponse'
          description: Successful Response
      summary: Get Health
      tags:
      - Monitor
  /api/v2/parseDagFile/{file_token}:
    put:
      description: Request re-parsing a DAG file.
      operationId: reparse_dag_file
      parameters:
      - in: path
        name: file_token
        required: true
        schema:
          title: File Token
          type: string
      responses:
        '201':
          content:
            application/json:
              schema:
                title: Response Reparse Dag File
                type: 'null'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Reparse Dag File
      tags:
      - DAG Parsing
  /api/v2/plugins:
    get:
      operationId: get_plugins
      parameters:
      - in: query
        name: limit
        required: false
        schema:
          default: 50
          minimum: 0
          title: Limit
          type: integer
      - in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          title: Offset
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PluginCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Plugins
      tags:
      - Plugin
  /api/v2/pools:
    get:
      description: Get all pools entries.
      operationId: get_pools
      parameters:
      - in: query
        name: limit
        required: false
        schema:
          default: 50
          minimum: 0
          title: Limit
          type: integer
      - in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          title: Offset
          type: integer
      - in: query
        name: order_by
        required: false
        schema:
          default: id
          title: Order By
          type: string
      - in: query
        name: pool_name_pattern
        required: false
        schema:
          nullable: true
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoolCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Pools
      tags:
      - Pool
    patch:
      description: Bulk create, update, and delete pools.
      operationId: bulk_pools
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkBody_PoolBody_'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Bulk Pools
      tags:
      - Pool
    post:
      description: Create a Pool.
      operationId: post_pool
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PoolBody'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoolResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Conflict
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Post Pool
      tags:
      - Pool
  /api/v2/pools/{pool_name}:
    delete:
      description: Delete a pool entry.
      operationId: delete_pool
      parameters:
      - in: path
        name: pool_name
        required: true
        schema:
          title: Pool Name
          type: string
      responses:
        '204':
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Delete Pool
      tags:
      - Pool
    get:
      description: Get a pool.
      operationId: get_pool
      parameters:
      - in: path
        name: pool_name
        required: true
        schema:
          title: Pool Name
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoolResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Pool
      tags:
      - Pool
    patch:
      description: Update a Pool.
      operationId: patch_pool
      parameters:
      - in: path
        name: pool_name
        required: true
        schema:
          title: Pool Name
          type: string
      - in: query
        name: update_mask
        required: false
        schema:
          items:
            type: string
          nullable: true
          type: array
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PoolPatchBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoolResponse'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Patch Pool
      tags:
      - Pool
  /api/v2/providers:
    get:
      description: Get providers.
      operationId: get_providers
      parameters:
      - in: query
        name: limit
        required: false
        schema:
          default: 50
          minimum: 0
          title: Limit
          type: integer
      - in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          title: Offset
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Providers
      tags:
      - Provider
  /api/v2/variables:
    get:
      description: Get all Variables entries.
      operationId: get_variables
      parameters:
      - in: query
        name: limit
        required: false
        schema:
          default: 50
          minimum: 0
          title: Limit
          type: integer
      - in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          title: Offset
          type: integer
      - in: query
        name: order_by
        required: false
        schema:
          default: id
          title: Order By
          type: string
      - in: query
        name: variable_key_pattern
        required: false
        schema:
          nullable: true
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VariableCollectionResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Variables
      tags:
      - Variable
    patch:
      description: Bulk create, update, and delete variables.
      operationId: bulk_variables
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkBody_VariableBody_'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Bulk Variables
      tags:
      - Variable
    post:
      description: Create a variable.
      operationId: post_variable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariableBody'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VariableResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Conflict
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Post Variable
      tags:
      - Variable
  /api/v2/variables/{variable_key}:
    delete:
      description: Delete a variable entry.
      operationId: delete_variable
      parameters:
      - in: path
        name: variable_key
        required: true
        schema:
          title: Variable Key
          type: string
      responses:
        '204':
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Delete Variable
      tags:
      - Variable
    get:
      description: Get a variable entry.
      operationId: get_variable
      parameters:
      - in: path
        name: variable_key
        required: true
        schema:
          title: Variable Key
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VariableResponse'
          description: Successful Response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Get Variable
      tags:
      - Variable
    patch:
      description: Update a variable by key.
      operationId: patch_variable
      parameters:
      - in: path
        name: variable_key
        required: true
        schema:
          title: Variable Key
          type: string
      - in: query
        name: update_mask
        required: false
        schema:
          items:
            type: string
          nullable: true
          type: array
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariableBody'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VariableResponse'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPExceptionResponse'
          description: Not Found
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Patch Variable
      tags:
      - Variable
  /api/v2/version:
    get:
      description: Get version information.
      operationId: get_version
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionInfo'
          description: Successful Response
      summary: Get Version
      tags:
      - Version
security:
- Basic: []
- GoogleOpenID: []
- Kerberos: []
