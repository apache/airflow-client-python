# coding: utf-8

"""
    Airflow API

    Airflow API. All endpoints located under ``/api/v2`` can be used safely, are stable and backward compatible. Endpoints located under ``/ui`` are dedicated to the UI and are subject to breaking change depending on the need of the frontend. Users should not rely on those but use the public ones instead.

    The version of the OpenAPI document: 2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from airflow_client.client.models.dag_run_response import DAGRunResponse
from airflow_client.client.models.dag_run_state import DagRunState
from airflow_client.client.models.dag_run_type import DagRunType
from airflow_client.client.models.dag_version_response import DagVersionResponse
from airflow_client.client.models.dag_run_triggered_by_type import DagRunTriggeredByType

class TestDAGRunResponse(unittest.TestCase):
    """DAGRunResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DAGRunResponse:
        """Test DAGRunResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # instance of `DAGRunResponse`
        if include_optional:
            return DAGRunResponse(
                bundle_version = '',
                conf = {},
                dag_id = '',
                dag_run_id = '',
                dag_versions = [
                    DagVersionResponse(
                        bundle_name = '', 
                        bundle_url = '', 
                        bundle_version = '', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        dag_id = '', 
                        id = '', 
                        version_number = 56)
                    ],
                data_interval_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                data_interval_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_scheduling_decision = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                logical_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                note = '',
                queued_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                run_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                run_type = DagRunType.BACKFILL,
                start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                state = DagRunState.QUEUED,
                triggered_by = DagRunTriggeredByType.CLI
            )
        else:
            return DAGRunResponse(
                conf = {},
                dag_id = '',
                dag_run_id = '',
                dag_versions = [
                    DagVersionResponse(
                        bundle_name = '', 
                        bundle_url = '', 
                        bundle_version = '', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        dag_id = '', 
                        id = '', 
                        version_number = 56)
                    ],
                run_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                run_type = DagRunType.BACKFILL,
                state = DagRunState.QUEUED
            )

    def testDAGRunResponse(self):
        """Test DAGRunResponse"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

    def test_to_json(self):
        """Test to_json for datetime serialization"""
        inst_req_and_optional = self.make_instance(include_optional=True)

        # Test that to_json works without errors
        json_output = inst_req_and_optional.to_json()

if __name__ == '__main__':
    unittest.main()
